
from datetime import datetime, timedelta
from tests_resources.files.report_service.data_type_list import sensor_glucose


def generate_record(sut, user, num_of_records, glucose):

    exp = {
        "entries": {}
    }
    counter = 1
    for i in range(0, num_of_records):
        selected_day = datetime.now() + timedelta(i)
        therapyTime = datetime.fromtimestamp(
            int(datetime.timestamp(selected_day) * 1000) / 1000).isoformat() + "+03:00"
        time_format = datetime.fromtimestamp(
            int(datetime.timestamp(selected_day) * 1000) / 1000).isoformat()
        time_epoch = int(datetime.timestamp(selected_day) * 1000)
        record = sensor_glucose(time_epoch=time_epoch, activity_timestamp=time_format,user_id=user,glucose_value=glucose,therapyTime=therapyTime)
        exp['entries'].update({counter: record})
        counter += 1
        record = basal_segment_start(time_epoch=time_epoch, activity_timestamp=time_format, user_id=user)
        exp['entries'].update({counter:record})
        counter = counter + 1
    response = sut.dss.create(exp, is_for_deletion=False)
    assert_response_text(200, response.status_code)


def record_uploaded_with_userid(sut, user, num_of_records,glucose= 100):
    exp = {
        "entries": {}
    }
    counter = 1
    for i in range(0, num_of_records):
        selected_day = datetime.now() + timedelta(i)
        therapyTime = datetime.fromtimestamp(
            int(datetime.timestamp(selected_day) * 1000) / 1000).isoformat() + "+00:00"
        time_format = datetime.fromtimestamp(
            int(datetime.timestamp(selected_day) * 1000) / 1000).isoformat() + "+00:00"
        time_epoch = int(datetime.timestamp(selected_day) * 1000)
        record = sensor_glucose(time_epoch=time_epoch, activity_timestamp=time_format, user_id=user.username,glucose_value=glucose,therapyTime=therapyTime)
        exp['entries'].update({counter: record})
        counter += 1
    response = sut.dss.create(exp, is_for_deletion=False)
    assert_response_text(200, response.status_code)

def record_for_post_metadata(sut, user,glucose=45):
    exp = {
        "entries": {}
    }
    counter = 1
    for i in range(0,6,2):
        selected_day = datetime.now() + timedelta(i)
        therapyTime = datetime.fromtimestamp(
            int(datetime.timestamp(selected_day) * 1000) / 1000).isoformat() + "+00:00"
        time_format = datetime.fromtimestamp(
            int(datetime.timestamp(selected_day) * 1000) / 1000).isoformat() + "+05:00"
        time_epoch = int(datetime.timestamp(selected_day) * 1000)
        record = sensor_glucose(time_epoch=time_epoch, activity_timestamp=time_format, user_id=user,glucose_value=glucose,therapyTime=therapyTime)
        exp['entries'].update({counter:record})
        counter += 1
    response = sut.dss.create(exp, is_for_deletion=False)
    assert_response_text(200, response.status_code)





