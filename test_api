import time
import uuid
import csv
import requests
import pytest
import os
from boto3.dynamodb.types import NULL
from infra.steps.steps import When, Then
from infra.utils.assert_functions import assert_response_text
from tests.conf import reporting_cc
from tests.dima_test import test_dima
from datetime import datetime, timedelta
from tests.dima_test import records
from tests.dima_test import record_metadata_status_204


@pytest.mark.daily
@pytest.mark.deployment
@pytest.mark.sanity
@pytest.mark.dss
def API_KEY(api_key):
    api_key = reporting_cc.api_key


def test_generate_report_different_headers_status_code_200(sut, user, user_de_id):
    user_deid = sut.auth.get_auth_authenticate(user_token=user_de_id.token)
    test_dima.test_generete_recordes(sut, user_deid.json()['nutrino_id'])
    start_day = datetime.now()
    end_day = datetime.now() + timedelta(7)
    selected_day = datetime.now() + timedelta(5)
    api_key = reporting_cc.api_key
    headers_list = [
        {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/pdf", "Encoding": "BASE64",
         "Compression": "ZIP"},
        {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/pdf", "Encoding": "BASE 64",
         "Compression": "GZIP"},
        {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/pdf", "Encoding": "NONE",
         "Compression": "GZIP"},
        {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/pdf", "Encoding": "NONE",
         "Compression": "ZIP"},
        {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/pfd", "Encoding": "NONE",
         "Compression": "NONE"},
        {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/csv", "Encoding": "BASE 64",
         "Compression": "GZIP"},
        {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/csv", "Encoding": "NONE",
         "Compression": "GZIP"},
        {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/csv", "Encoding": "BASE 64",
         "Compression": "ZIP"},
        {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/csv", "Encoding": "NONE",
         "Compression": "ZIP"},
        {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/csv", "Encoding ": "NONE",
         "Compression": "NONE"}
    ]

    with When(""):

        body = {"PatientUsername": user_de_id.username,
                "UICulture": "en-GB",
                "DateSeparator": "/",
                "TimeSeparator": ":",
                "LongTimePattern": "hh:mm:ss tt",
                "ShortDatePattern": selected_day.strftime('%Y/%m/%d'),
                "ShortTimePattern": "h:mm tt",
                "CountryCode": "GB",
                "AbbreviatedDayNames": [
                    "Su",
                    "Mo",
                    "Tu",
                    "We",
                    "Th",
                    "Fr",
                    "Sa"
                ],
                "DayNames": [
                    "Sunday",
                    "Monday",
                    "Tuesday",
                    "Wednesday",
                    "Thursday",
                    "Friday",
                    "Saturday"
                ],
                "RecordSeparator": ",",
                "GlucoseUnits": "mgdL",
                "CarbUnits": "grams",
                "GramsToAnExchange": 15,
                "FirstName": "TEST",
                "LastName": "TEST",
                "StartDate": start_day.strftime('%Y/%m/%d'),
                "EndDate": end_day.strftime('%Y/%m/%d'),
                "BgTargetLow": 70,
                "BgTargetHigh": 180,
                "BgTargetExtremeLow": 54,
                "BgTargetExtremeHigh": 250,
                "ShowReports": [
                    "ShowAdherenceReport",

                ],
                "ShowDailiesForDates": [
                    "2023-06-18T17:00:00",
                    "2023-06-19T17:00:00",
                    "2023-06-18T17:00:0×´",

                ],
                "MealPeriods": [
                    {
                        "PreBGTargetLow": 70,
                        "PreBGTargetHigh": 140,
                        "PostBGTargetLow": 100,
                        "PostBGTargetHigh": 160,
                        "PreAnalysisPeriod": 60,
                        "PostAnalysisPeriodStart": 60,
                        "PostAnalysisPeriodEnd": 180,
                        "Label": "Breakfast",
                        "StartMinOfDay": 360,
                        "EndMinOfDay": 600
                    },
                    {
                        "PreBGTargetLow": 70,
                        "PreBGTargetHigh": 140,
                        "PostBGTargetLow": 100,
                        "PostBGTargetHigh": 160,
                        "PreAnalysisPeriod": 60,
                        "PostAnalysisPeriodStart": 60,
                        "PostAnalysisPeriodEnd": 180,
                        "Label": "Lunch",
                        "StartMinOfDay": 660,
                        "EndMinOfDay": 900
                    },
                    {
                        "PreBGTargetLow": 70,
                        "PreBGTargetHigh": 140,
                        "PostBGTargetLow": 100,
                        "PostBGTargetHigh": 160,
                        "PreAnalysisPeriod": 60,
                        "PostAnalysisPeriodStart": 60,
                        "PostAnalysisPeriodEnd": 180,
                        "Label": "Dinner",
                        "StartMinOfDay": 960,
                        "EndMinOfDay": 1320
                    },
                    {
                        "PreBGTargetLow": 70,
                        "PreBGTargetHigh": 140,
                        "PostBGTargetLow": 100,
                        "PostBGTargetHigh": 160,
                        "PreAnalysisPeriod": 60,
                        "PostAnalysisPeriodStart": 60,
                        "PostAnalysisPeriodEnd": 180,
                        "Label": "Overnight",
                        "StartMinOfDay": 1320,
                        "EndMinOfDay": 360
                    }
                ],
                "BedtimeBucket": {
                    "Label": "Bedtime",
                    "StartMinOfDay": 1200,
                    "EndMinOfDay": 0
                },
                "WakeupBucket": {
                    "Label": "Wake Up",
                    "StartMinOfDay": 300,
                    "EndMinOfDay": 540
                },
                "ClientTime": "2023-02-27T10:30:41"
                }

        with Then("Verify that response display correct for all header option"):
            for headers in headers_list:
                response = sut.reporting.post_generate_report(json=body, headers=headers)
                assert_response_text(200, response.status_code)
                print(f"status code:  " + str(response.status_code))
                report_id = response.json()
                assert report_id is not None
                assert isinstance(report_id, dict) and len(report_id) == 1 and "uuid" in report_id
                uuid_str = report_id["uuid"]
                try:
                    uuid_obj = uuid.UUID(uuid_str)
                except ValueError:
                    assert False, f"The value '{uuid_str}' is not a valid UUID"
                print(f"Response - {response.text}")


def test_generate_report_error_status_code_422(sut, user, user_de_id):
    user_deid = sut.auth.get_auth_authenticate(user_token=user_de_id.token)
    print(user_deid.json()['nutrino_id'], flush=True)
    test_dima.test_generete_recordes(sut, user_deid.json()['nutrino_id'])
    print(user_de_id.username)
    start_day = datetime.now()
    print(start_day.strftime('%Y/%m/%d'))
    end_day = datetime.now() + timedelta(7)
    print(end_day.strftime('%Y/%m/%d'))
    selected_day = datetime.now() + timedelta(5)
    print(selected_day.strftime('%Y/%m/%d'))
    api_key = reporting_cc.api_key
    headers_list = [
        {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/pdf", "Encoding": "BASE64",
         "Compression": "ZIP"},
        {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/pdf", "Encoding": "BASE 64",
         "Compression": "GZIP"},
        {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/pdf", "Encoding": "NONE",
         "Compression": "GZIP"},
        {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/pdf", "Encoding": "NONE",
         "Compression": "ZIP"},
        {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/pfd", "Encoding": "NONE",
         "Compression": "NONE"},
        {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/csv", "Encoding": "BASE 64",
         "Compression": "GZIP"},
        {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/csv", "Encoding": "NONE",
         "Compression": "GZIP"},
        {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/csv", "Encoding": "BASE 64",
         "Compression": "ZIP"},
        {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/csv", "Encoding": "NONE",
         "Compression": "ZIP"},
        {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/csv", "Encoding ": "NONE",
         "Compression": "NONE"}
    ]
    with When(""):
        body = {"PatientUsername": user_de_id.username,

                "DateSeparator": "/",
                "TimeSeparator": ":",
                "LongTimePattern": "hh:mm:ss tt",
                "ShortDatePattern": selected_day.strftime('%Y/%m/%d'),
                "ShortTimePattern": "h:mm tt",
                "CountryCode": "GB",
                "AbbreviatedDayNames": [
                    "Su",
                    "Mo",
                    "Tu",
                    "We",
                    "Th",
                    "Fr",
                    "Sa"
                ],
                "DayNames": [
                    "Sunday",
                    "Monday",
                    "Tuesday",
                    "Wednesday",
                    "Thursday",
                    "Friday",
                    "Saturday"
                ],
                "RecordSeparator": ",",
                "GlucoseUnits": "mgdL",
                "CarbUnits": "grams",
                "GramsToAnExchange": 15,
                "FirstName": "TEST",
                "LastName": "TEST",
                "StartDate": start_day.strftime('%Y/%m/%d'),
                "EndDate": end_day.strftime('%Y/%m/%d'),
                "BgTargetLow": 70,
                "BgTargetHigh": 180,
                "BgTargetExtremeLow": 54,
                "BgTargetExtremeHigh": 250,
                "ShowReports": [
                    "ShowAdherenceReport",
                    "ShowOverviewReport",
                    "ShowLogbookReport",
                    "ShowDeviceSettings",
                    "ShowCompareReport",
                    "ShowDashboardReport",
                    "ShowEpisodesReport",
                    "ShowMealBolusWizardReport",
                    "ShowWeeklyReport"
                ],
                "ShowDailiesForDates": [
                    "2023-06-18T17:00:00",
                    "2023-06-19T17:00:00",
                    "2023-06-18T17:00:0×´",

                ],
                "MealPeriods": [
                    {
                        "PreBGTargetLow": 70,
                        "PreBGTargetHigh": 140,
                        "PostBGTargetLow": 100,
                        "PostBGTargetHigh": 160,
                        "PreAnalysisPeriod": 60,
                        "PostAnalysisPeriodStart": 60,
                        "PostAnalysisPeriodEnd": 180,
                        "Label": "Breakfast",
                        "StartMinOfDay": 360,
                        "EndMinOfDay": 600
                    },
                    {
                        "PreBGTargetLow": 70,
                        "PreBGTargetHigh": 140,
                        "PostBGTargetLow": 100,
                        "PostBGTargetHigh": 160,
                        "PreAnalysisPeriod": 60,
                        "PostAnalysisPeriodStart": 60,
                        "PostAnalysisPeriodEnd": 180,
                        "Label": "Lunch",
                        "StartMinOfDay": 660,
                        "EndMinOfDay": 900
                    },
                    {
                        "PreBGTargetLow": 70,
                        "PreBGTargetHigh": 140,
                        "PostBGTargetLow": 100,
                        "PostBGTargetHigh": 160,
                        "PreAnalysisPeriod": 60,
                        "PostAnalysisPeriodStart": 60,
                        "PostAnalysisPeriodEnd": 180,
                        "Label": "Dinner",
                        "StartMinOfDay": 960,
                        "EndMinOfDay": 1320
                    },
                    {
                        "PreBGTargetLow": 70,
                        "PreBGTargetHigh": 140,
                        "PostBGTargetLow": 100,
                        "PostBGTargetHigh": 160,
                        "PreAnalysisPeriod": 60,
                        "PostAnalysisPeriodStart": 60,
                        "PostAnalysisPeriodEnd": 180,
                        "Label": "Overnight",
                        "StartMinOfDay": 1320,
                        "EndMinOfDay": 360
                    }
                ],
                "BedtimeBucket": {
                    "Label": "Bedtime",
                    "StartMinOfDay": 1200,
                    "EndMinOfDay": 0
                },
                "WakeupBucket": {
                    "Label": "Wake Up",
                    "StartMinOfDay": 300,
                    "EndMinOfDay": 540
                },
                "ClientTime": "2023-02-27T10:30:41"
                }

        with Then("Verify that response display correct for all header option"):
            for headers in headers_list:
                response = sut.reporting.post_generate_report(json=body, headers=headers)
                print(f"Response - {response.text}")
                assert_response_text(422, response.status_code)
                print(f"status code:  " + str(response.status_code))
                response_json = response.json()
                assert "message" in response_json
                assert response_json[
                           "message"] == "Invalid body schema detected. Got error: 'UICulture' is a required property"


def test_generate_report_error_status_code_403(sut, user, user_de_id):
    user_deid = sut.auth.get_auth_authenticate(user_token=user_de_id.token)
    print(user_deid.json()['nutrino_id'], flush=True)
    test_dima.test_generete_recordes(sut, user_deid.json()['nutrino_id'])
    print(user_de_id.username)
    start_day = datetime.now()
    print(start_day.strftime('%Y/%m/%d'))
    end_day = datetime.now() + timedelta(7)
    print(end_day.strftime('%Y/%m/%d'))
    selected_day = datetime.now() + timedelta(5)
    print(selected_day.strftime('%Y/%m/%d'))

    headers_list = [
        {'Accept': "application/json", "ContentType": "application/pdf", "Encoding": "BASE64",
         "Compression": "ZIP"},
        {'Accept': "application/json", "ContentType": "application/pdf", "Encoding": "BASE 64",
         "Compression": "GZIP"},
        {'Accept': "application/json", "ContentType": "application/pdf", "Encoding": "NONE",
         "Compression": "GZIP"},
        {'Accept': "application/json", "ContentType": "application/pdf", "Encoding": "NONE",
         "Compression": "ZIP"},
        {'Accept': "application/json", "ContentType": "application/pfd", "Encoding": "NONE",
         "Compression": "NONE"},
        {'Accept': "application/json", "ContentType": "application/csv", "Encoding": "BASE 64",
         "Compression": "GZIP"},
        {'Accept': "application/json", "ContentType": "application/csv", "Encoding": "NONE",
         "Compression": "GZIP"},
        {'Accept': "application/json", "ContentType": "application/csv", "Encoding": "BASE 64",
         "Compression": "ZIP"},
        {'Accept': "application/json", "ContentType": "application/csv", "Encoding": "NONE",
         "Compression": "ZIP"},
        {'Accept': "application/json", "ContentType": "application/csv", "Encoding ": "NONE",
         "Compression": "NONE"}
    ]
    with When(""):
        body = {"PatientUsername": user.username,
                "UICulture": "en-GB",
                "DateSeparator": "/",
                "TimeSeparator": ":",
                "LongTimePattern": "hh:mm:ss tt",
                "ShortDatePattern": selected_day.strftime('%Y/%m/%d'),
                "ShortTimePattern": "h:mm tt",
                "CountryCode": "GB",
                "AbbreviatedDayNames": [
                    "Su",
                    "Mo",
                    "Tu",
                    "We",
                    "Th",
                    "Fr",
                    "Sa"
                ],
                "DayNames": [
                    "Sunday",
                    "Monday",
                    "Tuesday",
                    "Wednesday",
                    "Thursday",
                    "Friday",
                    "Saturday"
                ],
                "RecordSeparator": ",",
                "GlucoseUnits": "mgdL",
                "CarbUnits": "grams",
                "GramsToAnExchange": 15,
                "FirstName": "TEST",
                "LastName": "TEST",
                "StartDate": start_day.strftime('%Y/%m/%d'),
                "EndDate": end_day.strftime('%Y/%m/%d'),
                "BgTargetLow": 70,
                "BgTargetHigh": 180,
                "BgTargetExtremeLow": 54,
                "BgTargetExtremeHigh": 250,
                "ShowReports": [
                    "ShowAdherenceReport",
                    "ShowOverviewReport",
                    "ShowLogbookReport",
                    "ShowDeviceSettings",
                    "ShowCompareReport",
                    "ShowDashboardReport",
                    "ShowEpisodesReport",
                    "ShowMealBolusWizardReport",
                    "ShowWeeklyReport"
                ],
                "ShowDailiesForDates": [
                    "2023-06-18T17:00:00",
                    "2023-06-19T17:00:00",
                    "2023-06-18T17:00:0×´",

                ],
                "MealPeriods": [
                    {
                        "PreBGTargetLow": 70,
                        "PreBGTargetHigh": 140,
                        "PostBGTargetLow": 100,
                        "PostBGTargetHigh": 160,
                        "PreAnalysisPeriod": 60,
                        "PostAnalysisPeriodStart": 60,
                        "PostAnalysisPeriodEnd": 180,
                        "Label": "Breakfast",
                        "StartMinOfDay": 360,
                        "EndMinOfDay": 600
                    },
                    {
                        "PreBGTargetLow": 70,
                        "PreBGTargetHigh": 140,
                        "PostBGTargetLow": 100,
                        "PostBGTargetHigh": 160,
                        "PreAnalysisPeriod": 60,
                        "PostAnalysisPeriodStart": 60,
                        "PostAnalysisPeriodEnd": 180,
                        "Label": "Lunch",
                        "StartMinOfDay": 660,
                        "EndMinOfDay": 900
                    },
                    {
                        "PreBGTargetLow": 70,
                        "PreBGTargetHigh": 140,
                        "PostBGTargetLow": 100,
                        "PostBGTargetHigh": 160,
                        "PreAnalysisPeriod": 60,
                        "PostAnalysisPeriodStart": 60,
                        "PostAnalysisPeriodEnd": 180,
                        "Label": "Dinner",
                        "StartMinOfDay": 960,
                        "EndMinOfDay": 1320
                    },
                    {
                        "PreBGTargetLow": 70,
                        "PreBGTargetHigh": 140,
                        "PostBGTargetLow": 100,
                        "PostBGTargetHigh": 160,
                        "PreAnalysisPeriod": 60,
                        "PostAnalysisPeriodStart": 60,
                        "PostAnalysisPeriodEnd": 180,
                        "Label": "Overnight",
                        "StartMinOfDay": 1320,
                        "EndMinOfDay": 360
                    }
                ],
                "BedtimeBucket": {
                    "Label": "Bedtime",
                    "StartMinOfDay": 1200,
                    "EndMinOfDay": 0
                },
                "WakeupBucket": {
                    "Label": "Wake Up",
                    "StartMinOfDay": 300,
                    "EndMinOfDay": 540
                },
                "ClientTime": "2023-02-27T10:30:41"
                }

        with Then("Verify that response display correct for all header option"):
            for headers in headers_list:
                response = sut.reporting.post_generate_report(json=body, headers=headers)
                print(f"Response - {response.text}")
                assert_response_text(403, response.status_code)
                print(f"status code:  " + str(response.status_code))
                response_json = response.json()
                assert "message" in response_json
                assert response_json["message"] == "Forbidden"


def test_Get_status_code_200_error(sut, user, user_de_id):
    user_deid = sut.auth.get_auth_authenticate(user_token=user_de_id.token)
    print(user_deid.json()['nutrino_id'])
    test_dima.test_generete_recordes(sut, user_deid.json()['nutrino_id'])
    print(user_de_id.username)
    report_id = None
    start_day = datetime.now()
    print(start_day.strftime('%m/%d/%Y'))
    end_day = datetime.now() + timedelta(7)
    print(end_day.strftime('%m/%d/%Y'))
    selected_day = datetime.now() + timedelta(5)
    print(selected_day.strftime('%m/%d/%Y'))

    api_key = reporting_cc.api_key
    headers = {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/json",
               "Encoding": "BASE64",
               "Compression": "ZIP"}

    with When("Generate a uuid"):
        body = {"PatientUsername": user_de_id.username,
                "UICulture": "en-GB",
                "DateSeparator": "/",
                "TimeSeparator": ":",
                "LongTimePattern": "hh:mm:ss tt",
                "ShortDatePattern": selected_day.strftime('%m/%d/%Y'),
                "ShortTimePattern": "h:mm tt",
                "CountryCode": "GB",
                "AbbreviatedDayNames": [
                    "Su",
                    "Mo",
                    "Tu",
                    "We",
                    "Th",
                    "Fr",
                    "Sa"
                ],
                "DayNames": [
                    "Sunday",
                    "Monday",
                    "Tuesday",
                    "Wednesday",
                    "Thursday",
                    "Friday",
                    "Saturday"
                ],
                "RecordSeparator": ",",
                "GlucoseUnits": "mgdL",
                "CarbUnits": "grams",
                "GramsToAnExchange": 15,
                "FirstName": "TEST",
                "LastName": "TEST",
                "StartDate": start_day.strftime('%m/%d/%Y'),
                "EndDate": end_day.strftime('%m/%d/%Y'),
                "BgTargetLow": 70,
                "BgTargetHigh": 180,
                "BgTargetExtremeLow": 54,
                "BgTargetExtremeHigh": 250,
                "ShowReports": [
                    "ShowAdherenceReport",

                ],
                "ShowDailiesForDates": [
                    "2023-06-18T17:00:00",
                    "2023-06-19T17:00:00",
                    "2023-06-18T17:00:0×´",

                ],
                "MealPeriods": [
                    {
                        "PreBGTargetLow": 70,
                        "PreBGTargetHigh": 140,
                        "PostBGTargetLow": 100,
                        "PostBGTargetHigh": 160,
                        "PreAnalysisPeriod": 60,
                        "PostAnalysisPeriodStart": 60,
                        "PostAnalysisPeriodEnd": 180,
                        "Label": "Breakfast",
                        "StartMinOfDay": 360,
                        "EndMinOfDay": 600
                    },
                    {
                        "PreBGTargetLow": 70,
                        "PreBGTargetHigh": 140,
                        "PostBGTargetLow": 100,
                        "PostBGTargetHigh": 160,
                        "PreAnalysisPeriod": 60,
                        "PostAnalysisPeriodStart": 60,
                        "PostAnalysisPeriodEnd": 180,
                        "Label": "Lunch",
                        "StartMinOfDay": 660,
                        "EndMinOfDay": 900
                    },
                    {
                        "PreBGTargetLow": 70,
                        "PreBGTargetHigh": 140,
                        "PostBGTargetLow": 100,
                        "PostBGTargetHigh": 160,
                        "PreAnalysisPeriod": 60,
                        "PostAnalysisPeriodStart": 60,
                        "PostAnalysisPeriodEnd": 180,
                        "Label": "Dinner",
                        "StartMinOfDay": 960,
                        "EndMinOfDay": 1320
                    },
                    {
                        "PreBGTargetLow": 70,
                        "PreBGTargetHigh": 140,
                        "PostBGTargetLow": 100,
                        "PostBGTargetHigh": 160,
                        "PreAnalysisPeriod": 60,
                        "PostAnalysisPeriodStart": 60,
                        "PostAnalysisPeriodEnd": 180,
                        "Label": "Overnight",
                        "StartMinOfDay": 1320,
                        "EndMinOfDay": 360
                    }
                ],
                "BedtimeBucket": {
                    "Label": "Bedtime",
                    "StartMinOfDay": 1200,
                    "EndMinOfDay": 0
                },
                "WakeupBucket": {
                    "Label": "Wake Up",
                    "StartMinOfDay": 300,
                    "EndMinOfDay": 540
                },
                "ClientTime": "2023-02-27T10:30:41"
                }

        response = sut.reporting.post_generate_report(json=body, headers=headers)
        report_id = response.json().get("uuid")
        # assert_response_text("", response.text)
        assert_response_text(200, response.status_code)
        print(f"status code:  " + str(response.status_code))
        resp = response.json()
        assert resp is not None
        assert isinstance(resp, dict) and len(resp) == 1 and "uuid" in resp

    api_key = reporting_cc.api_key
    headers = {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/json"}
    with Then("Get relevent report status"):
        start_time = time.time()
        elapsed_time = 0

        while elapsed_time < 30:
            time.sleep(10)

            response = sut.reporting.get_status_report(uuid=report_id, headers=headers)
            assert_response_text(200, response.status_code)
            print("status code:  " + str(response.status_code))
            status = response.json().get("status")

            if status == "READY":
                break

            if status == "ERROR":
                print(f"Report status after 30 seconds: ERROR ")
            elif status == "NOT_READY":
                print("Report status after 30 seconds: NOT READY")
            else:
                print(f"Report status after 10 seconds: {status}")

            elapsed_time = time.time() - start_time

        assert status == "READY" or "ERROR" or "NOT_READY", f"Report status after 30 seconds: {status}"
        print(f"Response - {response.json}")
        print(status)


def test_Get_status_code_200_allStatus(sut, user, user_de_id):
    user_deid = sut.auth.get_auth_authenticate(user_token=user_de_id.token)
    print(user_deid.json()['nutrino_id'])
    test_dima.test_generete_recordes(sut, user_deid.json()['nutrino_id'])
    print(user_de_id.username)
    report_id = None
    start_day = datetime.now()
    print(start_day.strftime('%m/%d/%Y'))

    end_day = datetime.now() + timedelta(7)
    print(end_day.strftime('%m/%d/%Y'))
    selected_day = datetime.now() + timedelta(5)
    print(selected_day.strftime('%m/%d/%Y'))

    api_key = reporting_cc.api_key
    headers = {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/json",
               "Encoding": "BASE64", "Compression": "ZIP"}

    with When("Generate a uuid"):
        body = {"PatientUsername": user_de_id.username,
                "UICulture": "en-GB",
                "DateSeparator": "/",
                "TimeSeparator": ":",
                "LongTimePattern": "hh:mm:ss tt",
                "ShortDatePattern": selected_day.strftime('%m/%d/%Y'),
                "ShortTimePattern": "h:mm tt",
                "CountryCode": "GB",
                "AbbreviatedDayNames": [
                    "Su",
                    "Mo",
                    "Tu",
                    "We",
                    "Th",
                    "Fr",
                    "Sa"
                ],
                "DayNames": [
                    "Sunday",
                    "Monday",
                    "Tuesday",
                    "Wednesday",
                    "Thursday",
                    "Friday",
                    "Saturday"
                ],
                "RecordSeparator": ",",
                "GlucoseUnits": "mgdL",
                "CarbUnits": "grams",
                "GramsToAnExchange": 15,
                "FirstName": "TEST",
                "LastName": "TEST",
                "StartDate": start_day.strftime('%m/%d/%Y'),
                "EndDate": end_day.strftime('%m/%d/%Y'),
                "BgTargetLow": 70,
                "BgTargetHigh": 180,
                "BgTargetExtremeLow": 54,
                "BgTargetExtremeHigh": 250,
                "ShowReports": [
                    "ShowAdherenceReport",
                ],
                "ShowDailiesForDates": [
                    selected_day.strftime('%m/%d/%Y'),

                ],
                "MealPeriods": [
                    {
                        "PreBGTargetLow": 70,
                        "PreBGTargetHigh": 140,
                        "PostBGTargetLow": 100,
                        "PostBGTargetHigh": 160,
                        "PreAnalysisPeriod": 60,
                        "PostAnalysisPeriodStart": 60,
                        "PostAnalysisPeriodEnd": 180,
                        "Label": "Breakfast",
                        "StartMinOfDay": 360,
                        "EndMinOfDay": 600
                    },
                    {
                        "PreBGTargetLow": 70,
                        "PreBGTargetHigh": 140,
                        "PostBGTargetLow": 100,
                        "PostBGTargetHigh": 160,
                        "PreAnalysisPeriod": 60,
                        "PostAnalysisPeriodStart": 60,
                        "PostAnalysisPeriodEnd": 180,
                        "Label": "Lunch",
                        "StartMinOfDay": 660,
                        "EndMinOfDay": 900
                    },
                    {
                        "PreBGTargetLow": 70,
                        "PreBGTargetHigh": 140,
                        "PostBGTargetLow": 100,
                        "PostBGTargetHigh": 160,
                        "PreAnalysisPeriod": 60,
                        "PostAnalysisPeriodStart": 60,
                        "PostAnalysisPeriodEnd": 180,
                        "Label": "Dinner",
                        "StartMinOfDay": 960,
                        "EndMinOfDay": 1320
                    },
                    {
                        "PreBGTargetLow": 70,
                        "PreBGTargetHigh": 140,
                        "PostBGTargetLow": 100,
                        "PostBGTargetHigh": 160,
                        "PreAnalysisPeriod": 60,
                        "PostAnalysisPeriodStart": 60,
                        "PostAnalysisPeriodEnd": 180,
                        "Label": "Overnight",
                        "StartMinOfDay": 1320,
                        "EndMinOfDay": 360
                    }
                ],
                "BedtimeBucket": {
                    "Label": "Bedtime",
                    "StartMinOfDay": 1200,
                    "EndMinOfDay": 0
                },
                "WakeupBucket": {
                    "Label": "Wake Up",
                    "StartMinOfDay": 300,
                    "EndMinOfDay": 540
                },
                "ClientTime": "2023-02-27T10:30:41"
                }

        response = sut.reporting.post_generate_report(json=body, headers=headers)
        report_id = response.json().get("uuid")
        print("uuid" + report_id)
        # assert_response_text("", response.text)
        assert_response_text(200, response.status_code)
        print(f"status code:  " + str(response.status_code))
        resp = response.json()
        assert resp is not None
        assert isinstance(resp, dict) and len(resp) == 1 and "uuid" in resp

    api_key = reporting_cc.api_key
    headers = {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/json"}
    with Then("Get relevent report status"):
        start_time = time.time()
        elapsed_time = 0

        while elapsed_time < 30:
            time.sleep(10)

            response = sut.reporting.get_status_report(uuid=report_id, headers=headers)
            assert_response_text(200, response.status_code)
            print("status code:  " + str(response.status_code))
            status = response.json().get("status")

            if status == "READY":
                break

            if status == "ERROR":
                print(f"Report status after 30 seconds: ERROR ")
            elif status == "NOT_READY":
                print("Report status after 30 seconds: NOT READY")
            else:
                print(f"Report status after 30 seconds: {status}")

            elapsed_time = time.time() - start_time

        assert status == "READY" or "ERROR" or "NOT_READY", f"Report status after 30 seconds: {status}"
        print(f"Response - {response.json}")
        print(status)


def test_Get_report_CSV_status_code_200(sut, user_de_id):
    user_deid = sut.auth.get_auth_authenticate(user_token=user_de_id.token)
    test_dima.test_generete_recordes(sut, user_deid.json()['nutrino_id'])
    report_id = None
    start_day = datetime.now()
    end_day = datetime.now() + timedelta(6)
    selected_day = datetime.now() + timedelta(5)
    api_key = reporting_cc.api_key
    headers = {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/csv",
               "Encoding": "BASE64", "Compression": "ZIP"}

    with When("Generate a uuid"):
        body = {"PatientUsername": user_de_id.username,
                "UICulture": "en-GB",
                "DateSeparator": "/",
                "TimeSeparator": ":",
                "LongTimePattern": "hh:mm:ss tt",
                "ShortDatePattern": selected_day.strftime('%m/%d/%Y'),
                "ShortTimePattern": "h:mm tt",
                "CountryCode": "GB",
                "AbbreviatedDayNames": [
                    "Su",
                    "Mo",
                    "Tu",
                    "We",
                    "Th",
                    "Fr",
                    "Sa"
                ],
                "DayNames": [
                    "Sunday",
                    "Monday",
                    "Tuesday",
                    "Wednesday",
                    "Thursday",
                    "Friday",
                    "Saturday"
                ],
                "RecordSeparator": ",",
                "GlucoseUnits": "mgdL",
                "CarbUnits": "grams",
                "GramsToAnExchange": 15,
                "FirstName": "TEST",
                "LastName": "TEST",
                "StartDate": start_day.strftime('%m/%d/%Y'),
                "EndDate": end_day.strftime('%m/%d/%Y'),
                "BgTargetLow": 70,
                "BgTargetHigh": 180,
                "BgTargetExtremeLow": 54,
                "BgTargetExtremeHigh": 250,
                "ShowReports": [
                    "ShowAdherenceReport",
                ],
                "ShowDailiesForDates": [
                    selected_day.strftime('%m/%d/%Y'),

                ],
                "MealPeriods": [
                    {
                        "PreBGTargetLow": 70,
                        "PreBGTargetHigh": 140,
                        "PostBGTargetLow": 100,
                        "PostBGTargetHigh": 160,
                        "PreAnalysisPeriod": 60,
                        "PostAnalysisPeriodStart": 60,
                        "PostAnalysisPeriodEnd": 180,
                        "Label": "Breakfast",
                        "StartMinOfDay": 360,
                        "EndMinOfDay": 600
                    },
                    {
                        "PreBGTargetLow": 70,
                        "PreBGTargetHigh": 140,
                        "PostBGTargetLow": 100,
                        "PostBGTargetHigh": 160,
                        "PreAnalysisPeriod": 60,
                        "PostAnalysisPeriodStart": 60,
                        "PostAnalysisPeriodEnd": 180,
                        "Label": "Lunch",
                        "StartMinOfDay": 660,
                        "EndMinOfDay": 900
                    },
                    {
                        "PreBGTargetLow": 70,
                        "PreBGTargetHigh": 140,
                        "PostBGTargetLow": 100,
                        "PostBGTargetHigh": 160,
                        "PreAnalysisPeriod": 60,
                        "PostAnalysisPeriodStart": 60,
                        "PostAnalysisPeriodEnd": 180,
                        "Label": "Dinner",
                        "StartMinOfDay": 960,
                        "EndMinOfDay": 1320
                    },
                    {
                        "PreBGTargetLow": 70,
                        "PreBGTargetHigh": 140,
                        "PostBGTargetLow": 100,
                        "PostBGTargetHigh": 160,
                        "PreAnalysisPeriod": 60,
                        "PostAnalysisPeriodStart": 60,
                        "PostAnalysisPeriodEnd": 180,
                        "Label": "Overnight",
                        "StartMinOfDay": 1320,
                        "EndMinOfDay": 360
                    }
                ],
                "BedtimeBucket": {
                    "Label": "Bedtime",
                    "StartMinOfDay": 1200,
                    "EndMinOfDay": 0
                },
                "WakeupBucket": {
                    "Label": "Wake Up",
                    "StartMinOfDay": 300,
                    "EndMinOfDay": 540
                },
                "ClientTime": "2023-06-27T10:30:41"
                }

        response = sut.reporting.post_generate_report(json=body, headers=headers)
        report_id = response.json().get("uuid")
        print(report_id)
        # assert_response_text("", response.text)
        assert_response_text(200, response.status_code)
        print(f"status code:  " + str(response.status_code))
        resp = response.json()
        print(resp)
        assert resp is not None
        assert isinstance(resp, dict) and len(resp) == 1 and "uuid" in resp

    api_key = reporting_cc.api_key
    headers = {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/json"}
    with Then("Get relevent report status"):
        time.sleep(30)
        response = sut.reporting.get_status_report(headers=headers, uuid=report_id)
        print(response.status_code, response.json())
        print(f"Response - {response.json}")
        status = response.json().get("status")
        assert status == "READY"

    api_key = reporting_cc.api_key
    print("my api" + api_key)
    headers = {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/csv"}
    with Then("Verify that the CSV report was genarete correct"):
        response = sut.reporting.get_report_csv(headers=headers, uuid=report_id)
        # assert_response_text("", response.text)
        assert_response_text(200, response.status_code)
        file_name = "generated_report.csv"
        print("status code:  " + str(response.status_code))
        assert len(response.text) > 0
        # print(len(response.text))
        assert response.headers["Content-Type"] == "application/csv"
        print(response.headers)
        print(f"Generated CSV report saved as '{file_name}'.")
        file_name = "generated_report.csv"
        file_path = os.path.join("", file_name)
        with open(file_name, "w", newline="") as file:
            file.write(response.text)

        print(f"CSV report saved as '{file_path}'.")

        # Assert that the CSV file exists in the test folder
        # assert os.path.exists(file_path)
        # with open(file_path, "r") as file:
        #     csv_reader = csv.reader(file)
        #     header = next(csv_reader)  # Read the header row
        #     data = list(csv_reader)
        #     for row in data:
        #         user_id = row[4]  # Assuming user ID is in the first column
        #         assert user_id == user.username
        #         print(user_id)

        # with open(file_path, "r") as file:
        #     csv_reader = csv.reader(file)
        #     header = next(csv_reader)  # Read the header row
        #     expected_data = [body]
        #     for row in csv_reader:
        #         # Compare each column value with the expected data
        #         for expected_value, actual_value in zip(expected_data, row):
        #             assert expected_value == actual_value


def test_Get_report_json_status_code_200(sut, user_de_id):
    user_deid = sut.auth.get_auth_authenticate(user_token=user_de_id.token)
    print(user_deid.json()['nutrino_id'], flush=True)
    test_dima.test_generete_recordes(sut, user_deid.json()['nutrino_id'])
    print(user_de_id.username)
    report_id = None
    start_day = datetime.now()
    print(start_day.strftime('%m/%d/%Y'))
    end_day = datetime.now() + timedelta(6)
    print(end_day.strftime('%m/%d/%Y'))
    selected_day = datetime.now() + timedelta(5)
    print(selected_day.strftime('%m/%d/%Y'))

    api_key = reporting_cc.api_key
    headers = {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/json",
               "Encoding": "BASE64", "Compression": "ZIP"}

    with When("Generate a uuid"):
        body = {"PatientUsername": user_de_id.username,
                "UICulture": "en-GB",
                "DateSeparator": "/",
                "TimeSeparator": ":",
                "LongTimePattern": "hh:mm:ss tt",
                "ShortDatePattern": selected_day.strftime('%m/%d/%Y'),
                "ShortTimePattern": "h:mm tt",
                "CountryCode": "GB",
                "AbbreviatedDayNames": [
                    "Su",
                    "Mo",
                    "Tu",
                    "We",
                    "Th",
                    "Fr",
                    "Sa"
                ],
                "DayNames": [
                    "Sunday",
                    "Monday",
                    "Tuesday",
                    "Wednesday",
                    "Thursday",
                    "Friday",
                    "Saturday"
                ],
                "RecordSeparator": ",",
                "GlucoseUnits": "mgdL",
                "CarbUnits": "grams",
                "GramsToAnExchange": 15,
                "FirstName": "TEST",
                "LastName": "TEST",
                "StartDate": start_day.strftime('%m/%d/%Y'),
                "EndDate": end_day.strftime('%m/%d/%Y'),
                "BgTargetLow": 70,
                "BgTargetHigh": 180,
                "BgTargetExtremeLow": 54,
                "BgTargetExtremeHigh": 250,
                "ShowReports": [
                    "ShowAdherenceReport",
                ],
                "ShowDailiesForDates": [
                    selected_day.strftime('%m/%d/%Y'),

                ],
                "MealPeriods": [
                    {
                        "PreBGTargetLow": 70,
                        "PreBGTargetHigh": 140,
                        "PostBGTargetLow": 100,
                        "PostBGTargetHigh": 160,
                        "PreAnalysisPeriod": 60,
                        "PostAnalysisPeriodStart": 60,
                        "PostAnalysisPeriodEnd": 180,
                        "Label": "Breakfast",
                        "StartMinOfDay": 360,
                        "EndMinOfDay": 600
                    },
                    {
                        "PreBGTargetLow": 70,
                        "PreBGTargetHigh": 140,
                        "PostBGTargetLow": 100,
                        "PostBGTargetHigh": 160,
                        "PreAnalysisPeriod": 60,
                        "PostAnalysisPeriodStart": 60,
                        "PostAnalysisPeriodEnd": 180,
                        "Label": "Lunch",
                        "StartMinOfDay": 660,
                        "EndMinOfDay": 900
                    },
                    {
                        "PreBGTargetLow": 70,
                        "PreBGTargetHigh": 140,
                        "PostBGTargetLow": 100,
                        "PostBGTargetHigh": 160,
                        "PreAnalysisPeriod": 60,
                        "PostAnalysisPeriodStart": 60,
                        "PostAnalysisPeriodEnd": 180,
                        "Label": "Dinner",
                        "StartMinOfDay": 960,
                        "EndMinOfDay": 1320
                    },
                    {
                        "PreBGTargetLow": 70,
                        "PreBGTargetHigh": 140,
                        "PostBGTargetLow": 100,
                        "PostBGTargetHigh": 160,
                        "PreAnalysisPeriod": 60,
                        "PostAnalysisPeriodStart": 60,
                        "PostAnalysisPeriodEnd": 180,
                        "Label": "Overnight",
                        "StartMinOfDay": 1320,
                        "EndMinOfDay": 360
                    }
                ],
                "BedtimeBucket": {
                    "Label": "Bedtime",
                    "StartMinOfDay": 1200,
                    "EndMinOfDay": 0
                },
                "WakeupBucket": {
                    "Label": "Wake Up",
                    "StartMinOfDay": 300,
                    "EndMinOfDay": 540
                },
                "ClientTime": "2023-06-27T10:30:41"
                }

        response = sut.reporting.post_generate_report(json=body, headers=headers)
        report_id = response.json().get("uuid")
        print(report_id)
        # assert_response_text("", response.text)
        assert_response_text(200, response.status_code)
        print(f"status code:  " + str(response.status_code))
        resp = response.json()
        print(resp)
        assert resp is not None
        assert isinstance(resp, dict) and len(resp) == 1 and "uuid" in resp

    api_key = reporting_cc.api_key
    headers = {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/json"}
    with Then("Get relevent report status"):
        time.sleep(30)
        response = sut.reporting.get_status_report(headers=headers, uuid=report_id)
        print(response.status_code, response.json())
        print(f"Response - {response.json}")
        status = response.json().get("status")
        assert status == "READY"

    api_key = reporting_cc.api_key
    print("my api" + api_key)
    headers = {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/json"}
    with Then("Verify that the CSV report was genarete correct"):
        response = sut.reporting.get_report_json(headers=headers, uuid=report_id)
        # assert_response_text("", response.text)
        assert_response_text(200, response.status_code)
        file_name = "generated_report.csv"
        print("status code:  " + str(response.status_code))
        assert len(response.text) > 0
        # print(len(response.text))
        assert response.headers["Content-Type"] == "application/json"
        print(response.headers)
        # print(f"Generated CSV report saved as '{file_name}'.")
        file_name = "generated_report.csv"

        file_path = os.path.join("", file_name)

        # Save the report to a CSV file
        with open(file_name, "w", newline="") as file:
            file.write(response.text)

        print(f"CSV report saved as '{file_path}'.")


def test_Get_report_CSV_status_code_403(sut, user_de_id):
    user_deid = sut.auth.get_auth_authenticate(user_token=user_de_id.token)
    print(user_deid.json()['nutrino_id'], flush=True)
    test_dima.test_generete_recordes(sut, user_deid.json()['nutrino_id'])
    print(user_de_id.username)
    report_id = None
    start_day = datetime.now()

    print(start_day.strftime('%m/%d/%Y'))
    end_day = datetime.now() + timedelta(7)
    print(end_day.strftime('%m/%d/%Y'))
    selected_day = datetime.now() + timedelta(5)
    print(selected_day.strftime('%m/%d/%Y'))

    api_key = reporting_cc.api_key
    headers = {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/json",
               "Encoding": "BASE64", "Compression": "ZIP"}

    with When("Generate a uuid"):
        body = {"PatientUsername": user_de_id.username,
                "UICulture": "en-GB",
                "DateSeparator": "/",
                "TimeSeparator": ":",
                "LongTimePattern": "hh:mm:ss tt",
                "ShortDatePattern": selected_day.strftime('%m/%d/%Y'),
                "ShortTimePattern": "h:mm tt",
                "CountryCode": "GB",
                "AbbreviatedDayNames": [
                    "Su",
                    "Mo",
                    "Tu",
                    "We",
                    "Th",
                    "Fr",
                    "Sa"
                ],
                "DayNames": [
                    "Sunday",
                    "Monday",
                    "Tuesday",
                    "Wednesday",
                    "Thursday",
                    "Friday",
                    "Saturday"
                ],
                "RecordSeparator": ",",
                "GlucoseUnits": "mgdL",
                "CarbUnits": "grams",
                "GramsToAnExchange": 15,
                "FirstName": "TEST",
                "LastName": "TEST",
                "StartDate": start_day.strftime('%m/%d/%Y'),
                "EndDate": end_day.strftime('%m/%d/%Y'),
                "BgTargetLow": 70,
                "BgTargetHigh": 180,
                "BgTargetExtremeLow": 54,
                "BgTargetExtremeHigh": 250,
                "ShowReports": [
                    "ShowAdherenceReport",
                ],
                "ShowDailiesForDates": [
                    selected_day.strftime('%m/%d/%Y'),

                ],
                "MealPeriods": [
                    {
                        "PreBGTargetLow": 70,
                        "PreBGTargetHigh": 140,
                        "PostBGTargetLow": 100,
                        "PostBGTargetHigh": 160,
                        "PreAnalysisPeriod": 60,
                        "PostAnalysisPeriodStart": 60,
                        "PostAnalysisPeriodEnd": 180,
                        "Label": "Breakfast",
                        "StartMinOfDay": 360,
                        "EndMinOfDay": 600
                    },
                    {
                        "PreBGTargetLow": 70,
                        "PreBGTargetHigh": 140,
                        "PostBGTargetLow": 100,
                        "PostBGTargetHigh": 160,
                        "PreAnalysisPeriod": 60,
                        "PostAnalysisPeriodStart": 60,
                        "PostAnalysisPeriodEnd": 180,
                        "Label": "Lunch",
                        "StartMinOfDay": 660,
                        "EndMinOfDay": 900
                    },
                    {
                        "PreBGTargetLow": 70,
                        "PreBGTargetHigh": 140,
                        "PostBGTargetLow": 100,
                        "PostBGTargetHigh": 160,
                        "PreAnalysisPeriod": 60,
                        "PostAnalysisPeriodStart": 60,
                        "PostAnalysisPeriodEnd": 180,
                        "Label": "Dinner",
                        "StartMinOfDay": 960,
                        "EndMinOfDay": 1320
                    },
                    {
                        "PreBGTargetLow": 70,
                        "PreBGTargetHigh": 140,
                        "PostBGTargetLow": 100,
                        "PostBGTargetHigh": 160,
                        "PreAnalysisPeriod": 60,
                        "PostAnalysisPeriodStart": 60,
                        "PostAnalysisPeriodEnd": 180,
                        "Label": "Overnight",
                        "StartMinOfDay": 1320,
                        "EndMinOfDay": 360
                    }
                ],
                "BedtimeBucket": {
                    "Label": "Bedtime",
                    "StartMinOfDay": 1200,
                    "EndMinOfDay": 0
                },
                "WakeupBucket": {
                    "Label": "Wake Up",
                    "StartMinOfDay": 300,
                    "EndMinOfDay": 540
                },
                "ClientTime": "2023-02-27T10:30:41"
                }

        response = sut.reporting.post_generate_report(json=body, headers=headers)
        report_id = response.json().get("uuid")
        print(report_id)
        # assert_response_text("", response.text)
        assert_response_text(200, response.status_code)
        print(f"status code:  " + str(response.status_code))
        resp = response.json()
        print(resp)
        assert resp is not None
        assert isinstance(resp, dict) and len(resp) == 1 and "uuid" in resp

    api_key = reporting_cc.api_key
    headers = {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/json"}
    with Then("Get relevent report status"):
        time.sleep(30)
        response = sut.reporting.get_status_report(headers=headers, uuid=report_id)
        print(response.status_code, response.json())
        print(f"Response - {response.json}")
        status = response.json().get("status")
        assert status == "READY"
    api_key = reporting_cc.api_key
    headers = {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/csv"}
    with Then("Verify that the CSV report was genarete correct"):
        response = sut.reporting.get_report_csv(headers=headers, uuid=report_id)
        assert_response_text(403, response.status_code)
        response_json = response.json()
        assert "message" in response_json
        assert response_json["message"] == "Forbidden"


def test_post_metadata_status_code_403(sut, user_de_id):
    user_deid = sut.auth.get_auth_authenticate(user_token=user_de_id.token)
    print(user_deid.json()['nutrino_id'], flush=True)
    test_dima.test_generete_recordes(sut, user_deid.json()['nutrino_id'])
    start_day = datetime.now()
    print(start_day.strftime('%Y/%m/%d'))
    end_day = datetime.now() + timedelta(7)
    print(end_day.strftime('%Y/%m/%d'))
    selected_day = datetime.now() + timedelta(5)
    print(selected_day.strftime('%Y/%m/%d'))
    headers = {'Accept': "application/json", "ContentType": "application/json"}
    with When("Generate a uuid"):
        body = {"PatientUsername": user_de_id.username,
                "from": start_day.strftime('%Y/%m/%d'),
                "to": end_day.strftime('%Y/%m/%d')
                }
    with Then("Verify that response display correct for all header option"):
        response = sut.reporting.post_ReportMetaData(json=body, headers=headers)
        print(f"Response - {response.text}")
        assert_response_text(403, response.status_code)
        print(f"status code:  " + str(response.status_code))
        response_json = response.json()
        assert "message" in response_json
        assert response_json["message"] == "Forbidden"


def test_post_metadata_status_code_422(sut, user_de_id):
    user_deid = sut.auth.get_auth_authenticate(user_token=user_de_id.token)
    print(user_deid.json()['nutrino_id'])
    test_dima.test_generete_recordes(user_deid)
    body_assert = ["patientUsername", "from", "to"]
    properties = "properties"
    start_day = datetime.now()
    print(start_day.strftime('%Y/%m/%d'))
    end_day = datetime.now() + timedelta(7)
    print(end_day.strftime('%Y/%m/%d'))
    selected_day = datetime.now() + timedelta(5)
    print(selected_day.strftime('%Y/%m/%d'))
    api_key = reporting_cc.api_key
    headers = {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/json"}
    with When("Generate a uuid"):
        body = {"patientUsername": user_de_id.username
                }
    with Then("Verify that response display correct for all header option"):
        response = sut.reporting.post_ReportMetaData(json=body, headers=headers)
        print(f"Response - {response.text}")
        # assert_response_text("", response.text)
        assert_response_text(422, response.status_code)
        print(f"status code:  " + str(response.status_code))
        response = response.json()
        assert "message" in response
        assert response[
                   "message"] == f"Payload schema validation failed - data must contain {str(body_assert)} {properties}"


def test_post_metadata_status_code_204(sut, user):
    record_metadata_status_204.test_generete_recorde(sut, user)
    start_day = datetime.now()
    end_day = datetime.now() + timedelta(7)
    api_key = reporting_cc.api_key
    headers = {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/json"}
    with When(""):
        body = {"patientUsername": user.username,
                "from": start_day.strftime('%Y-%m-%d'),
                "to": end_day.strftime('%Y-%m-%d')
                }
    with Then("Verify that response display correct for all header option"):
        response = sut.reporting.post_ReportMetaData(json=body, headers=headers)
        print(f"Response - {response.text}")
        assert_response_text(204, response.status_code)
        print(f"status code:  " + str(response.status_code))
        response = response.json()
        assert "message" in response
        assert response[
                   "message"] == "No Content"


def generate_expected_segments(days: int) -> [dict[str]]:
    segments = []
    for day in range(0, days + 1, 2):
        start_day = datetime.now() + timedelta(day)
        end_day = datetime.now() + timedelta(day)
        segment = {
            "start": start_day.strftime('%Y-%m-%d'),
            "end": end_day.strftime('%Y-%m-%d')
        }
        segments.append(segment)

    return segments


def test_post_metadata_status_code_200(sut, user_de_id):
    user_deid = sut.auth.get_auth_authenticate(user_token=user_de_id.token)
    print(user_deid.json()['nutrino_id'])
    records.test_generete_recorde(sut, user_deid.json()['nutrino_id'])
    # test_dima.test_generete_recordes(sut, user_deid.json()['nutrino_id'])
    start_day = datetime.now()
    print(start_day.strftime('%Y/%m/%d'))
    days = 2
    end_day = datetime.now() + timedelta(days)
    print(end_day.strftime('%Y/%m/%d'))
    api_key = reporting_cc.api_key
    headers = {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/json"}
    with When(""):
        body = {"patientUsername": user_de_id.username,
                "from": start_day.strftime('%Y-%m-%d'),
                "to": end_day.strftime('%Y-%m-%d')
                }
        expected_result = {

            "dataProvider": [
                {
                    "segments": generate_expected_segments(days),
                    "category": "UNKNOWN",
                    "deviceModel": "UNKNOWN"

                }
            ]
        }
    with Then("Verify that response display correct for all header option"):
        response = sut.reporting.post_ReportMetaData(json=body, headers=headers)
        print(f"Response - {response.text}")
        # assert_response_text("", response.text)
        assert_response_text(200, response.status_code)

        print(f"status code:  " + str(response.status_code))
        actual_result = response.json()
        print(actual_result)
        # assert len(actual_result["dataProvider"]["segments"]) == 1
        assert expected_result["dataProvider"] == actual_result["dataProvider"]


def test_get_metadata_start_end_Date_with_block_date_status_code_200(sut, user_de_id):
    user_de = None
    user_deid = sut.auth.get_auth_authenticate(user_token=user_de_id.token)
    print(user_deid.json()['nutrino_id'])
    test_dima.test_generete_recordes(sut, user_deid.json()['nutrino_id'])
    start_day = datetime.now()
    print(start_day.strftime('%Y/%m/%d'))
    end_day = datetime.now() + timedelta(5)
    print(end_day.strftime('%Y/%m/%d'))
    api_key = reporting_cc.api_key
    headers = {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/json"}

    with Then("Verify that response display correct for all header option"):
        expected_result = {
            "start": start_day.strftime('%Y-%m-%d'),
            "end": end_day.strftime('%Y-%m-%d')
        }
        response = sut.reporting.get_ReportMetaData_patientss(headers=headers, user=user_de_id.username)
        print(f"Response - {response.text}")

        # assert_response_text("", response.text)
        assert_response_text(200, response.status_code)

        print(f"status code:  " + str(response.status_code))
        actuall_result = response.json()
        print(actuall_result)
        print(expected_result)
        assert actuall_result == expected_result


def test_get_metadata_start_end_Date_without_block_date_status_code_200(sut, user_de_id):
    user_deid = sut.auth.get_auth_authenticate(user_token=user_de_id.token)
    print(user_deid.json()['nutrino_id'])
    test_dima.test_generete_recordes(sut, user_deid.json()['nutrino_id'])
    start_day = datetime.now()
    print(start_day.strftime('%Y/%m/%d'))
    end_day = datetime.now() + timedelta(14)
    print(end_day.strftime('%Y/%m/%d'))
    api_key = reporting_cc.api_key
    headers = {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/json"}

    with Then("Verify that response display correct for all header option"):
        expected_result = {
            "start": start_day.strftime('%Y-%m-%d'),
            "end": end_day.strftime('%Y-%m-%d')
        }
        response = sut.reporting.get_ReportMetaData_patients(headers=headers, user=user_de_id.username)
        print(f"Response - {response.text}")

        # assert_response_text("", response.text)
        assert_response_text(200, response.status_code)

        print(f"status code:  " + str(response.status_code))
        actuall_result = response.json()
        print(actuall_result)
        print(expected_result)
        assert actuall_result == expected_result

        # assert object(expected_result == actuall_result)


def test_get_metadata_start_end_Date_status_code_403(sut, user_de_id):
    user_de_id.username = None
    user_deid = sut.auth.get_auth_authenticate(user_token=user_de_id.token)
    print(user_deid.json()['nutrino_id'])
    test_dima.test_generete_recordes(sut, user_deid.json()['nutrino_id'])
    start_day = datetime.now()
    print(start_day.strftime('%Y/%m/%d'))
    end_day = datetime.now() + timedelta(7)
    print(end_day.strftime('%Y/%m/%d'))

    headers = {'Accept': "application/json", "ContentType": "application/json"}
    with When(""):
        with Then("Verify that response display correct for all header option"):
            response = sut.reporting.get_ReportMetaData_patients(headers=headers, user=user_de_id.username)
            print(f"Response - {response.text}")
            response = sut.reporting.post_generate_report(headers=headers)
            print(f"Response - {response.text}")
            assert_response_text(403, response.status_code)
            print(f"status code:  " + str(response.status_code))
            response_json = response.json()
            assert "message" in response_json
            assert response_json["message"] == "Forbidden"
