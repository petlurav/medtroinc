import random
import time
import pytest
from infra.steps.steps import When, Then, Given
from infra.utils.assert_functions import assert_response_text
from tests.reports_metadata_service import common_operations
from datetime import datetime, timedelta


@pytest.mark.daily
@pytest.mark.deployment
@pytest.mark.sanity
@pytest.mark.metadata_service
@pytest.mark.xrayjira('COM-6218')
def test_post_metadata_status_code_204(sut, user,report,user_de_id):
    """
    upload data with userid to dss,send a request to the "ReportDataTimelinesForCalendar" api
    with the record that was uploaded with the “userid” to dss and get status code 204
    @param sut:for using all configurations and base definitions
    @param user:user id for upload data to dss
    """
    with Given("use userid to upload data to dss"):
        num_of_records = 8
        glucose = random.randint(40, 300)
        user_deid = sut.auth.get_auth_authenticate(user_token=user_de_id.token)
        common_operations.record_uploaded_with_userid(sut, user,num_of_records,glucose)
        start_day = datetime.now()
        end_day = datetime.now() + timedelta(7)
    headers = {'Accept': "application/json", 'x-api-key': sut.metadata.api_key, "ContentType": "application/json","Authorization": f"Bearer {user_de_id.token}"}
    with When("define the 'from' and 'to' date"):
        body = { "from": start_day.strftime('%Y-%m-%d'),
                "to": end_day.strftime('%Y-%m-%d')
                }
        response = sut.metadata.post_report_metadata(json=body, headers=headers)
        report.debug(response)
    with Then("verify the response return status code 204"):
        assert_response_text(204, response.status_code),f"Test was failed status code is:{response.status_code}"

def generate_expected_segments(days: int) -> [dict[str]]:
    """
    This function counts the data segment between the requested start and end date.
    @param days: It's the maximum end date the request should take when bringing the dates that have a data
    """
    segments = []
    for day in range(0,days,2):
        start_day = datetime.now() + timedelta(day)
        end_day = datetime.now() + timedelta(day)
        segment = {
            "start": start_day.strftime('%Y-%m-%d' + "T00:00:00"),
            "end": end_day.strftime('%Y-%m-%d' + "T00:00:00")
        }
        segments.append(segment)
    return segments

@pytest.mark.daily
@pytest.mark.deployment
@pytest.mark.sanity
@pytest.mark.metadata_service
@pytest.mark.xrayjira('COM-6202')
def test_post_metadata_status_code_200(sut,report, user_de_id):
    """
    upload data with deid to dss, send a request to 'reportdatatimelinesforcalendar' api
    and get a number of segments, device model,
    and source category with data between the requested ‘from’ and ‘to’ date
    @param sut:for using all configurations and base definitions
    @param user_de_id:user deid for upload data to dss
    """
    with Given(f"generate data for user"):
        glucose = random.randint(40, 300)
        user_deid = sut.auth.get_auth_authenticate(user_token=user_de_id.token)
        common_operations.record_for_post_metadata(sut,user_deid.json()['nutrino_id'],glucose)
        start_day = datetime.now()
        days = 6
        end_day = datetime.now() + timedelta(days)
    headers = {'Accept': "application/json", 'x-api-key': sut.metadata.api_key, "ContentType": "application/json","Authorization": f"Bearer {user_de_id.token}"}
    with When("define the 'from' and 'to' date"):
        body = {
                "from": start_day.strftime('%Y-%m-%d'),
                "to": end_day.strftime('%Y-%m-%d')
                }

    with When("use'generate_expected_segments'function for count the segments and define the relevant category send the request to generate a segment count"):
        expected_result = {
            "dataProvider": [
                {
                    "segments": generate_expected_segments(days),
                    "category": "SENSOR",
                    "deviceModel": "UNKNOWN"

                }
            ]
        }
        response = sut.metadata.post_report_metadata(json=body, headers=headers)
    with Then("verify that the data appears as the date segments between the defined 'from'' and 'to' date with the correct category and deveModel"):
        assert_response_text(200, response.status_code),f"Test was failed status code is:{response.status_code}"
        actual_result = response.json()
        report.debug(expected_result)
        report.debug(actual_result)
        assert expected_result["dataProvider"] == actual_result["dataProvider"],f"Expected status {expected_result}, Got{actual_result}"


@pytest.mark.daily
@pytest.mark.deployment
@pytest.mark.sanity
@pytest.mark.metadata_service
@pytest.mark.xrayjira('COM-6243')
def test_get_metadata_with_block_date_status_code_200(sut,report, user_de_id):
    """
    Send a request to reportDataTimelinesRange API and get the start and end dates that the user has data for.
     use the block day to define the end date
    @param sut:for using all configurations and base definitions
    @param user_de_id:user id for upload data to dss
    """
    with Given(f"generate data for user"):
        num_of_records = 10
        glucose = random.randint(40, 300)
        user_deid = sut.auth.get_auth_authenticate(user_token=user_de_id.token)
        common_operations.generate_record(sut, user_deid.json()['nutrino_id'], num_of_records,glucose)
        start_day = datetime.now()
        end_day = datetime.now() + timedelta(5)

    headers = {'Accept': "application/json", 'x-api-key': sut.metadata.api_key, "ContentType": "application/json","Authorization": f"Bearer {user_de_id.token}"}
    with When("define the start and end dates and send the request order to generate a date with a defined block day"):
        expected_result = {
            "start": start_day.strftime('%Y-%m-%d'),
            "end": end_day.strftime('%Y-%m-%d')
        }
        response = sut.metadata.get_report_metadata_with_block_day(headers=headers)
    with Then("verify that the start and end date appear until the defined block date "):
        assert_response_text(200, response.status_code)
        actual_result = response.json()
        report.debug(actual_result)
        assert actual_result == expected_result,f"Expected status {expected_result}, Got{actual_result}"

@pytest.mark.daily
@pytest.mark.deployment
@pytest.mark.sanity
@pytest.mark.metadata_service
@pytest.mark.xrayjira('COM-6199')
def test_get_metadata_without_block_date_status_code_200(sut,report, user_de_id):
    """
    Send a request to reportDataTimelinesRange API and get the start and end dates that the user has data for.
    @param sut:for using all configurations and base definitions
    @param user_de_id:user id for upload data to dss
    """
    with Given(f"generate data for user"):
        num_of_records = 15
        glucose = random.randint(40, 300)
        user_deid = sut.auth.get_auth_authenticate(user_token=user_de_id.token)
        common_operations.generate_record(sut, user_deid.json()['nutrino_id'], num_of_records,glucose)
        start_day = datetime.now()
        end_day = datetime.now() + timedelta(14)
        time.sleep(10)

    headers = {'Accept': "application/json", 'x-api-key': sut.metadata.api_key, "ContentType": "application/json", "Authorization": f"Bearer {user_de_id.token}",
                  "Encoding": "BASE64","Compression": "ZIP"}
    with Then("set the start and end dates and send a request"):
        expected_result = {
            "start": start_day.strftime('%Y-%m-%d'),
            "end": end_day.strftime('%Y-%m-%d')
        }
        response = sut.metadata.get_report_metadata(headers=headers)
    with Then("verify that the start and end date are displayed for the date range with  data for the requested patient"):
        assert_response_text(200, response.status_code)
        actual_result = response.json()
        report.debug(actual_result)
        assert actual_result == expected_result,f"Expected status {expected_result}, Got{actual_result}"
