import random
import time
import pytest
from infra.steps.steps import When, Then, Given
from infra.utils.assert_functions import assert_response_text
from tests.reports_broker_service import common_operations
from datetime import datetime, timedelta
from tests_resources.files.broker_service.broker_body_template import valid_record


#first example
@pytest.mark.daily
@pytest.mark.deployment
@pytest.mark.sanity
@pytest.mark.broker_service
@pytest.mark.xrayjira(test_key='COM-4045')
@pytest.mark.parametrize("content_type", ["application/pdf", "application/json", "application/csv"])
@pytest.mark.parametrize("encoding", ["BASE64", "NONE"])
@pytest.mark.parametrize("compression", ["ZIP", "GZIP", "NONE"])
def test_generate_report_different_headers_status_code_200(sut,report,user_de_id,content_type,encoding,compression):
    """
    upload data with deid to dss,send a request to the generateReport api get "uuid" in the response for all types of headers
    @param sut: for using all configurations and base definitions
    @param user_de_id:user deid for upload data to dss
    @param content_type: ContentType for the request.
    @param encoding: Encoding for the request.
    @param compression: Compression for the request.
    """
    with Given(f"Generate data for user"):
        response_de_id = common_operations.generate_de_id_user(sut=sut, user_token=user_de_id.token, report=report)
        common_operations.create_and_upload_records_to_dss(sut=sut, user=response_de_id)
        time.sleep(20)
        body = get_body_template(start_day=0, end_day=7, selected_day=5)

    with When("Send the body of the request with the generated deid"):
            headers = common_operations.generate_broker_service_headers(content_type, encoding, compression, sut,user_de_id)
            response = sut.broker.post_generate_report(json=body, headers=headers)
            assert_response_text(STATUS_OK,response.status_code), f"Test failed, status code is: {response.status_code}"
            report_id = response.json()
            report.debug(f"Print the uuid for headers type ContentType")

    with Then("Verify that the 'uuid' displays correctly for all header types and for the requested patient"):
            report.debug(f"Print the uuid for headers type ContentType={content_type}, Encoding={encoding}, Compression={compression}: {report_id}")
            assert report_id is not None, "Test failed, the uuid is empty"
            assert isinstance(report_id, dict) and len(report_id) == 1 and "uuid" in report_id, "Test failed, 'uuid' not generated"










#second example
@pytest.mark.daily
@pytest.mark.deployment
@pytest.mark.sanity
@pytest.mark.broker_service
@pytest.mark.xrayjira('COM-4045')
def test_generate_report_different_headers_status_code_200(sut,report,user_de_id):
    """
    upload data with deid to dss,send a request to the generateReport api get "uuid"in the response for all types of headers
    @param sut: for using all configurations and base definitions
    @param user_de_id:user deid for upload data to dss
    """
    with Given(f"generate data for user"):
        num_of_records = 8
        glucose = random.randint(40, 300)
        user_deid = sut.auth.get_auth_authenticate(user_token=user_de_id.token)
        common_operations.generate_record(sut, user_deid.json()['nutrino_id'], num_of_records,glucose)
        time.sleep(20)
        start_day = datetime.now()
        end_day = datetime.now() + timedelta(7)
        selected_day = datetime.now() + timedelta(5)

    headers_list = [
        {'Accept': "application/json", 'x-api-key': sut.broker.api_key, "ContentType": "application/pdf", "Encoding": "BASE64","Authorization": f"Bearer {user_de_id.token}",
         "Compression": "ZIP"},
        {'Accept': "application/json", 'x-api-key': sut.broker.api_key, "ContentType": "application/pdf", "Encoding": "BASE64","Authorization": f"Bearer {user_de_id.token}",
         "Compression": "GZIP"},
        {'Accept': "application/json", 'x-api-key': sut.broker.api_key, "ContentType": "application/pdf", "Encoding": "NONE","Authorization": f"Bearer {user_de_id.token}",
         "Compression": "GZIP"},
        {'Accept': "application/json", 'x-api-key': sut.broker.api_key, "ContentType": "application/pdf", "Encoding": "NONE","Authorization": f"Bearer {user_de_id.token}",
         "Compression": "ZIP"},
        {'Accept': "application/json", 'x-api-key': sut.broker.api_key, "ContentType": "application/pfd", "Encoding": "NONE","Authorization": f"Bearer {user_de_id.token}",
         "Compression": "NONE"},
        {'Accept': "application/json", 'x-api-key': sut.broker.api_key, "ContentType": "application/csv", "Encoding": "BASE64","Authorization": f"Bearer {user_de_id.token}",
         "Compression": "GZIP"},
        {'Accept': "application/json", 'x-api-key': sut.broker.api_key, "ContentType": "application/csv", "Encoding": "NONE","Authorization": f"Bearer {user_de_id.token}",
         "Compression": "GZIP"},
        {'Accept': "application/json", 'x-api-key': sut.broker.api_key, "ContentType": "application/csv", "Encoding": "BASE64","Authorization": f"Bearer {user_de_id.token}",
         "Compression": "ZIP"},
        {'Accept': "application/json", 'x-api-key': sut.broker.api_key, "ContentType": "application/csv", "Encoding": "NONE","Authorization": f"Bearer {user_de_id.token}",
         "Compression": "ZIP"},
        {'Accept': "application/json", 'x-api-key': sut.broker.api_key, "ContentType": "application/csv", "Encoding ": "NONE","Authorization": f"Bearer {user_de_id.token}",
         "Compression": "NONE"}
    ]

    with When("send the body of the request with the generated deid"):
        body = valid_record
        body["StartDate"] = start_day.strftime('%m/%d/%Y')
        body["EndDate"] = end_day.strftime('%m/%d/%Y')
        body["ShortDatePattern"] = selected_day.strftime('%m/%d/%Y')
        body["ShowDailiesForDates"] = [selected_day.strftime('%m/%d/%Y')]
    with Then("verify that the 'uuid' display correct for all header types and for the requested patient"):
        for headers in headers_list:
            response = sut.broker.post_generate_report(json=body, headers=headers)
            assert_response_text(200, response.status_code),f"Test was failed status code is:{response.status_code}"
            report_id = response.json()
            report.debug(report_id)
            assert report_id is not None
            assert isinstance(report_id, dict) and len(report_id) == 1 and "uuid" in report_id,"The test is failed 'uuid' not generated"

@pytest.mark.daily
@pytest.mark.deployment
@pytest.mark.sanity
@pytest.mark.broker_service
@pytest.mark.xrayjira('COM-4070')
def test_get_status_code_200_report_status_error(sut,report, user_de_id,user):
    """
    upload data with deid to dss ,send a request to 'generatereport' api,
    and get the 'uuid' use the 'uuid' to get a report status from the 'getstatus' api request
    and get status code 200 and status report "ERROR" in the response
    @param sut:for using all configurations and base definitions
    @param user_de_id:user deid for upload data to dss
    """
    with Given(f"generate data for user"):
        num_of_records = 10
        glucose = random.randint(40, 300)
        user_deid = sut.auth.get_auth_authenticate(user_token=user_de_id.token)
        common_operations.generate_record(sut,user_deid.json()['nutrino_id'],num_of_records,glucose)
        start_day = datetime.now()
        end_day = datetime.now() + timedelta(3)
        selected_day = datetime.now() + timedelta(5)

    headers = {'Accept': "application/json", 'x-api-key': sut.broker.api_key, "ContentType": "application/json", "Authorization": f"Bearer {user_de_id.token}",
               "Encoding": "BASE64","Compression": "ZIP"}
    with When("sending the body to the 'generatereport' api request with the generated deid to generate a uuid"):
        body = valid_record
        body["StartDate"] = start_day.strftime('%m/%d/%Y')
        body["StartDate"] = start_day.strftime('%m/%d/%Y')
        body["EndDate"] = end_day.strftime('%m/%d/%Y')
        body["ShortDatePattern"] = selected_day.strftime('%m/%d/%Y')
        body["ShowDailiesForDates"] = ["2023-06-18T17:00:00", "2023-06-19T17:00:00"]
        response = sut.broker.post_generate_report(json=body, headers=headers)
        report_id = response.json().get("uuid")
        assert_response_text(200, response.status_code),f"Test was failed status code is:{response.status_code}"
        resp = response.json()
        assert resp is not None
        assert isinstance(resp, dict) and len(resp) == 1 and "uuid" in resp,"The test is failed 'uuid' not generated"
    headers = {'Accept': "application/json", 'x-api-key': sut.broker.api_key, "ContentType": "application/json","Authorization": f"Bearer {user_de_id.token}",}
    with Then("verify that the report status 'error' appears in the response"):
        actual_status = ""
        expected_status = "ERROR"
        for _ in range(3):
            response = sut.broker.get_status_report(uuid=report_id, headers=headers)
            assert_response_text(200, response.status_code),f"Test was failed status code is:{response.status_code}"
            status = response.json().get("status")
            if status == "ERROR":
                actual_status = "ERROR"
                report.debug(f"Report status is: ERROR")
                break
            elif status == "NOT_READY":
                report.debug(f"Report status is: NOT READY")
            else:
                report.debug(f"Report status is: {status}")
            time.sleep(10)
        assert actual_status == expected_status,f"Expected status {expected_status}, Got{actual_status}"


@pytest.mark.daily
@pytest.mark.deployment
@pytest.mark.sanity
@pytest.mark.broker_service
@pytest.mark.xrayjira('COM-4104')
def test_get_status_code_200_status_ready(sut,report,user_de_id):
    """
    upload data with deid to dss ,send a request to 'generatereport' api,
    and get the 'uuid' use the 'uuid' to get a report status from the 'getstatus' api and
    get status code 200 and status "READY" in the response
    @param sut:for using all configurations and base definitions
    @param user_de_id:user deid for upload data to dss
    """
    with Given(f"generate data for user"):
        num_of_records = 10
        glucose = random.randint(40, 300)
        user_deid = sut.auth.get_auth_authenticate(user_token=user_de_id.token)
        common_operations.generate_record(sut, user_deid.json()['nutrino_id'], num_of_records,glucose)
        start_day = datetime.now()
        end_day = datetime.now() + timedelta(9)
        selected_day = datetime.now() + timedelta(9)
    headers = {'Accept': "application/json", 'x-api-key': sut.broker.api_key, "ContentType": "application/json","Authorization": f"Bearer {user_de_id.token}",
                 "Encoding": "BASE64", "Compression": "ZIP"}
    with When("sending the body to the 'generateReport' api request with the generated deid to generate a uuid"):
        body = valid_record
        body["StartDate"] = start_day.strftime('%m/%d/%Y')
        body["EndDate"] = end_day.strftime('%m/%d/%Y')
        body["ShortDatePattern"] = selected_day.strftime('%m/%d/%Y')
        body["ShowDailiesForDates"] = [selected_day.strftime('%m/%d/%Y')]
        response = sut.broker.post_generate_report(json=body, headers=headers)
        report_id = response.json().get("uuid")
        assert_response_text(200, response.status_code),f"Test was failed status code is:{response.status_code}"
        resp = response.json()
        assert resp is not None
        assert isinstance(resp, dict) and len(resp) == 1 and "uuid" in resp,"The test is failed 'uuid' not generated"
    headers = {'Accept': "application/json", 'x-api-key': sut.broker.api_key, "ContentType": "application/json","Authorization": f"Bearer {user_de_id.token}"}
    with Then("verify that the response returns the status 'READY' "):
        actual_status = ""
        expected_status = "READY"
        for _ in range(3):
            response = sut.broker.get_status_report(uuid=report_id, headers=headers)
            assert_response_text(200, response.status_code),f"Test was failed status code is:{response.status_code}"
            status = response.json().get("status")
            if status == "READY":
                actual_status = "READY"
                report.debug(f"Report status is: READY")
                break
            elif status == "NOT_READY":
                report.debug(f"Report status is: NOT READY")
            else:
                report.debug(f"Report status is: {status}")
            time.sleep(10)
        assert actual_status == expected_status, f"Expected status {expected_status}, Got{actual_status}"

@pytest.mark.daily
@pytest.mark.deployment
@pytest.mark.sanity
@pytest.mark.broker_service
@pytest.mark.xrayjira('COM-6266')
def test_get_status_code_200_status_unknown(sut, report, user_de_id):
    """
    upload data with deid to dss ,send a request to 'getstatus' api
    and get a report status "unknown" and status code 200
    @param sut:for using all configurations and base definitions
    @param user_de_id:user deid for upload data to dss
    """
    with Given(f"generate data for user"):
        num_of_records = 10
        glucose = random.randint(40, 300)
        user_deid = sut.auth.get_auth_authenticate(user_token=user_de_id.token)
        common_operations.generate_record(sut, user_deid.json()['nutrino_id'], num_of_records,glucose)
    headers = {'Accept': "application/json", 'x-api-key': sut.broker.api_key, "ContentType": "application/json",
               "Authorization": f"Bearer {user_de_id.token}"}
    with Then("verify that the response returns the status 'UNKNOWN' "):
        report_id = ""
        actual_status = ""
        expected_status = "UNKNOWN"
        for _ in range(2):
            response = sut.broker.get_status_report(uuid=report_id,headers=headers)
            assert_response_text(200, response.status_code), f"Test was failed status code is:{response.status_code}"
            status = response.json().get("status")
            if status == "UNKNOWN":
                actual_status = "UNKNOWN"
                report.debug(f"Report status is: UNKNOWN")
                break
            elif status == "READY":
                report.debug(f"Report status is: READY")
            else:
                report.debug(f"Report status is: {status}")
            time.sleep(10)
        assert actual_status == expected_status, f"Expected status {expected_status}, Got{actual_status}"


@pytest.mark.daily
@pytest.mark.deployment
@pytest.mark.sanity
@pytest.mark.broker_service
@pytest.mark.xrayjira('COM-6224')

def test_get_report_csv_format_status_code_200(sut,report, user_de_id):
    """
    upload data with deid to dss,send a request to 'generateReport' api
    and get the 'uuid', use the 'uuid' to get a report status from the 'GetStatus' api request,
    and send a request to 'reportcsv' api to get a report in csv format
    @param sut:for using all configurations and base definitions
    @param user_de_id:user deid for upload data to dss
    """
    with Given(f"generate data for user"):
        num_of_records = 8
        user_deid = sut.auth.get_auth_authenticate(user_token=user_de_id.token)
        glucose = random.randint(40, 300)
        common_operations.generate_record(sut, user_deid.json()['nutrino_id'], num_of_records,glucose)
        start_day = datetime.now()
        end_day = datetime.now() + timedelta(7)
        selected_day = datetime.now() + timedelta(7)
        headers = {'Accept': "application/json", 'x-api-key': sut.broker.api_key, "ContentType": "application/csv",
                   "Encoding": "BASE64", "Compression": "ZIP","Authorization": f"Bearer {user_de_id.token}"}
    with When("send the body to the 'generateReport' api request with the generated deid to generate a uuid"):
        body = valid_record
        body["StartDate"] = start_day.strftime('%m/%d/%Y')
        body["EndDate"] = end_day.strftime('%m/%d/%Y')
        body["ShortDatePattern"] = selected_day.strftime('%m/%d/%Y')
        body["ShowDailiesForDates"] = [selected_day.strftime('%m/%d/%Y')]
        response = sut.broker.post_generate_report(json=body, headers=headers)
        report_id = response.json().get("uuid")
        assert_response_text(200, response.status_code),f"Test was failed status code is:{response.status_code}"
        resp = response.json()
        assert resp is not None
        assert isinstance(resp, dict) and len(resp) == 1 and "uuid" in resp,"The test is failed 'uuid' not generated"

        headers = {'Accept': "application/json", 'x-api-key': sut.broker.api_key, "ContentType": "application/json","Authorization": f"Bearer {user_de_id.token}"}
    with When("send a request to get a report status"):
        time.sleep(30)
        response = sut.broker.get_status_report(headers=headers, uuid=report_id)
        status = response.json().get("status")
        assert status == "READY",f"The test was failed status is: {status}"
        headers = {'Accept': "application/json", 'x-api-key': sut.broker.api_key, "ContentType": "application/csv","Authorization": f"Bearer {user_de_id.token}"}
    with Then("verify that the csv report was generate with data that belongs to the uploaded user data"):
        response = sut.broker.get_report_endpoints(headers=headers, uuid=report_id, format='Csv')
        assert_response_text(200, response.status_code),f"Test was failed status code is:{response.status_code}"
        report.debug(response)
        report.debug(response.text)
        file_name = "generated_report.csv"
    with open(file_name, "w", newline="") as csv_file:
        csv_file.write(response.text)
        assert len(response.text) > 0
        assert "Content-Type" in response.headers and "application/csv" in response.headers ["Content-Type"],f"Test failed the csv report doesn't generated"

@pytest.mark.daily
@pytest.mark.deployment
@pytest.mark.sanity
@pytest.mark.broker_service
@pytest.mark.xrayjira('COM-6227')
def test_get_report_json_format_generated(sut,report, user_de_id):
    """
    upload data with deid to dss, send a request to 'generateReport' api
    and get the 'uuid', use the 'uuid' to get a report status from the 'getstatus' api request,
    and send a request to the 'reportjson' api to get a report in json format
    @param sut:for using all configurations and base definitions
    @param user_de_id:user deid for upload data to dss
    """
    with Given(f"generate data for user"):
        num_of_records = 10
        glucose = random.randint(40, 300)
        user_deid = sut.auth.get_auth_authenticate(user_token=user_de_id.token)
        common_operations.generate_record(sut, user_deid.json()['nutrino_id'], num_of_records,glucose)
        start_day = datetime.now()
        end_day = datetime.now() + timedelta(6)
        selected_day = datetime.now() + timedelta(5)
    headers = {'Accept': "application/json", 'x-api-key': sut.broker.api_key, "ContentType": "application/json","Authorization": f"Bearer {user_de_id.token}",
               "Encoding": "BASE64", "Compression": "ZIP"}

    with When("send the body to the 'generateReport' api request to generate a uuid"):
        body = valid_record
        body["StartDate"] = start_day.strftime('%m/%d/%Y')
        body["EndDate"] = end_day.strftime('%m/%d/%Y')
        body["ShortDatePattern"] = selected_day.strftime('%m/%d/%Y')
        body["ShowDailiesForDates"] = [selected_day.strftime('%m/%d/%Y')]
        response = sut.broker.post_generate_report(json=body, headers=headers)
        report_id = response.json().get("uuid")
        assert_response_text(200, response.status_code),f"Test was failed status code is:{response.status_code}"
        resp = response.json()
        assert resp is not None
        assert isinstance(resp, dict) and len(resp) == 1 and "uuid" in resp,"The test is failed 'uuid' not generated"
    headers = {'Accept': "application/json", 'x-api-key': sut.broker.api_key, "ContentType": "application/json","Authorization": f"Bearer {user_de_id.token}"}
    with When(" send a request for get a report status"):
        time.sleep(30)
        response = sut.broker.get_status_report(headers=headers, uuid=report_id)
        status = response.json().get("status")
        assert status == "READY",f"The test was failed status is: {status}"
    headers = {'Accept': "application/json", 'x-api-key': sut.broker.api_key, "ContentType": "application/json","Authorization": f"Bearer {user_de_id.token}"}
    with Then("verify that the json report was generate with data that belongs to the uploaded user data"):
        response = sut.broker.get_report_endpoints(headers=headers, uuid=report_id, format="Json")
        report.debug(response.json())
        assert_response_text(200, response.status_code),f"Test was failed status code is:{response.status_code}"
        assert len(response.text) > 0
        assert response.headers["Content-Type"] == "application/json",f"Test failed the json report doesn't generated"
        actual_deviceId = 105
        actual_bg_low = 70
        actual_bg_high = 180
        expected_bg_target_high = response.json()['input'].get('bgTargetHigh')
        expected_bg_target_low = response.json()['input'].get('bgTargetLow')
        expected_deviceId = response.json()['report']['deviceInfo'][0].get('deviceId')
        assert_response_text(expected_deviceId, actual_deviceId),f"Expected status {expected_deviceId}, Got{actual_deviceId}"
        assert_response_text(expected_bg_target_low,actual_bg_low),f"Expected status {expected_bg_target_low}, Got{actual_bg_low}"
        assert_response_text(expected_bg_target_high,actual_bg_high),f"Expected status {expected_bg_target_high}, Got{actual_bg_high}"

