
import time
import uuid
import pytest
from infra.steps.steps import When, Then, Given
from infra.utils.assert_functions import assert_response_text
from tests.conf import reporting_cc
from tests.report_service import generate_data_dss
from datetime import datetime, timedelta
from tests_resources.files.report_service.broker_body_template import valid_record, invalid_record


@pytest.mark.daily
@pytest.mark.deployment
@pytest.mark.dss
def test_generate_report_error_status_code_422(sut, user_de_id):
    """
    Send a request to generate Report Api with one incorrect field in the body and
    get status code 422 for all type of headers
    @param sut:for using all configurations and base definitions
    @param user_de_id:user id for upload data to dss
    """
    with Given(f"generate data for user"):
        num_of_records = 10
        user_deid = sut.auth.get_auth_authenticate(user_token=user_de_id.token)
        generate_data_dss.test_generete_record(sut, user_deid.json()['nutrino_id'], num_of_records)
        time.sleep(20)
        start_day = datetime.now()
        end_day = datetime.now() + timedelta(7)
        selected_day = datetime.now() + timedelta(5)
    api_key = reporting_cc.api_key
    headers_list = [
        {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/pdf", "Encoding": "BASE64","Authorization": f"Bearer {user_de_id.token}",
         "Compression": "ZIP"},
        {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/pdf", "Encoding": "BASE 64","Authorization": f"Bearer {user_de_id.token}",
         "Compression": "GZIP"},
        {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/pdf", "Encoding": "NONE","Authorization": f"Bearer {user_de_id.token}",
         "Compression": "GZIP"},
        {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/pdf", "Encoding": "NONE","Authorization": f"Bearer {user_de_id.token}",
         "Compression": "ZIP"},
        {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/pfd", "Encoding": "NONE","Authorization": f"Bearer {user_de_id.token}",
         "Compression": "NONE"},
        {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/csv", "Encoding": "BASE 64","Authorization": f"Bearer {user_de_id.token}",
         "Compression": "GZIP"},
        {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/csv", "Encoding": "NONE","Authorization": f"Bearer {user_de_id.token}",
         "Compression": "GZIP"},
        {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/csv", "Encoding": "BASE 64","Authorization": f"Bearer {user_de_id.token}",
         "Compression": "ZIP"},
        {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/csv", "Encoding": "NONE","Authorization": f"Bearer {user_de_id.token}",
         "Compression": "ZIP"},
        {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/csv", "Encoding ": "NONE","Authorization": f"Bearer {user_de_id.token}",
         "Compression": "NONE"}
    ]
    with When("to generate a UUID, send the body of the request with the generated username without the required field UICulture "):
        body = invalid_record
        body["StartDate"] = start_day.strftime('%m/%d/%Y')
        body["EndDate"] = end_day.strftime('%m/%d/%Y')
        body["ShortDatePattern"] = selected_day.strftime('%m/%d/%Y')
        body["ShowDailiesForDates"] = [selected_day.strftime('%m/%d/%Y')]

        with Then("verify that the status code is 422 and the error message appears with the missing value"):
            for headers in headers_list:
                response = sut.reporting.post_generate_report(json=body, headers=headers)
                assert_response_text(422, response.status_code)
                response_json = response.json()
                assert "message" in response_json
                assert response_json[
                           "message"] == "Invalid body schema detected. Got error: 'UICulture' is a required property"


def test_generate_report_error_status_code_403(sut, user_de_id):
    """
    Send a request to generate Report Api without api-key and get status code 403
    @param sut:for using all configurations and base definitions
    @param user_de_id:user id for upload data to dss
    """
    with Given(f"generate data for user"):
        num_of_records = 10
        user_deid = sut.auth.get_auth_authenticate(user_token=user_de_id.token)
        generate_data_dss.test_generete_record(sut, user_deid.json()['nutrino_id'], num_of_records)
        start_day = datetime.now()
        end_day = datetime.now() + timedelta(7)
        selected_day = datetime.now() + timedelta(5)
    headers_list = [
        {'Accept': "application/json", "ContentType": "application/pdf", "Encoding": "BASE64","Authorization": f"Bearer {user_de_id.token}",
         "Compression": "ZIP"},
        {'Accept': "application/json", "ContentType": "application/pdf", "Encoding": "BASE 64","Authorization": f"Bearer {user_de_id.token}",
         "Compression": "GZIP"},
        {'Accept': "application/json", "ContentType": "application/pdf", "Encoding": "NONE","Authorization": f"Bearer {user_de_id.token}",
         "Compression": "GZIP"},
        {'Accept': "application/json", "ContentType": "application/pdf", "Encoding": "NONE","Authorization": f"Bearer {user_de_id.token}",
         "Compression": "ZIP"},
        {'Accept': "application/json", "ContentType": "application/pfd", "Encoding": "NONE","Authorization": f"Bearer {user_de_id.token}",
         "Compression": "NONE"},
        {'Accept': "application/json", "ContentType": "application/csv", "Encoding": "BASE 64","Authorization": f"Bearer {user_de_id.token}",
         "Compression": "GZIP"},
        {'Accept': "application/json", "ContentType": "application/csv", "Encoding": "NONE","Authorization": f"Bearer {user_de_id.token}",
         "Compression": "GZIP"},
        {'Accept': "application/json", "ContentType": "application/csv", "Encoding": "BASE 64","Authorization": f"Bearer {user_de_id.token}",
         "Compression": "ZIP"},
        {'Accept': "application/json", "ContentType": "application/csv", "Encoding": "NONE","Authorization": f"Bearer {user_de_id.token}",
         "Compression": "ZIP"},
        {'Accept': "application/json", "ContentType": "application/csv", "Encoding ": "NONE","Authorization": f"Bearer {user_de_id.token}",
         "Compression": "NONE"}
    ]
    with When("to generate a UUID, send the body of the request with the generated username without the api-key"):
        body = valid_record
        body["StartDate"] = start_day.strftime('%m/%d/%Y')
        body["EndDate"] = end_day.strftime('%m/%d/%Y')
        body["ShortDatePattern"] = selected_day.strftime('%m/%d/%Y')
        body["ShowDailiesForDates"] = [selected_day.strftime('%m/%d/%Y')]

        with Then("verify status code 403 and message Forbidden appears in the response"):
            for headers in headers_list:
                response = sut.reporting.post_generate_report(json=body, headers=headers)
                assert_response_text(403, response.status_code)
                response_json = response.json()
                assert "message" in response_json
                assert response_json["message"] == 'Forbidden'


def test_get_report_csv_format_status_code_409(sut, user_de_id):
    """
    Send a request to reportCsv Api without uploading data
    and without creating a "uuid" and get status 409 and a response message.
    @param sut:for using all configurations and base definitions
    @param user_de_id:user id for upload data to dss
    """
    with Given("api-key for reportcsv request"):
        api_key = reporting_cc.api_key
        headers = {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/csv","Authorization": f"Bearer {user_de_id.token}"}
    with When("the request should be sent without an UUID and report status"):
        response = sut.reporting.get_report_endpoints(headers=headers, uuid=uuid, format="Csv")
    with Then("verify that the csv report is not generated and the error message appears"):
        assert_response_text(409, response.status_code)
        response_json = response.json()
        assert "message" in response_json
        assert response_json[
                   "message"] == "A report must be in READY status to complete this request. Currently it is in UNKNOWN status"


def test_get_report_json_format_status_code_409(sut, user_de_id):
    """
    Send a request to reportJson Api without uploading data
    and without creating a "uuid" and get status 409 and a response message.
    @param sut:for using all configurations and base definitions
    @param user_de_id:user id for upload data to dss
    """
    with Given("api-key for reportjson request"):
        api_key = reporting_cc.api_key
        headers = {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/json","Authorization": f"Bearer {user_de_id.token}"}
    with Then("the request should be sent without an UUID and report status "):
        response = sut.reporting.get_report_endpoints(headers=headers, uuid=uuid, format="Csv")
    with Then("verify that the json report is not generated and the error message appears"):
        assert_response_text(409, response.status_code)
        response_json = response.json()
        assert "message" in response_json
        assert response_json[
                   "message"] == "A report must be in READY status to complete this request. Currently it is in UNKNOWN status"


def test_get_report_csv_api_without_api_key_status_code_403(sut, user_de_id):
    """
    Send a request to reportCsv Api for download the csv format report
    without api-key and get status code 403
    @param sut:for using all configurations and base definitions
    @param user_de_id:user id for upload data to dss
    """
    with Given(f"generate data for user"):
        num_of_records = 10
        user_deid = sut.auth.get_auth_authenticate(user_token=user_de_id.token)
        generate_data_dss.test_generete_record(sut, user_deid.json()['nutrino_id'], num_of_records)
        report_id = None
        start_day = datetime.now()
        end_day = datetime.now() + timedelta(7)
        selected_day = datetime.now() + timedelta(5)
    api_key = reporting_cc.api_key
    headers = {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/json","Authorization": f"Bearer {user_de_id.token}",
               "Encoding": "BASE64", "Compression": "ZIP"}

    with When("send a request to generate a UUID, use the body of the request with the generated username"):
        body = valid_record
        body["StartDate"] = start_day.strftime('%m/%d/%Y')
        body["EndDate"] = end_day.strftime('%m/%d/%Y')
        body["ShortDatePattern"] = selected_day.strftime('%m/%d/%Y')
        body["ShowDailiesForDates"] = [selected_day.strftime('%m/%d/%Y')]
        response = sut.reporting.post_generate_report(json=body, headers=headers)
        report_id = response.json().get("uuid")
        assert_response_text(200, response.status_code)
        resp = response.json()
        assert resp is not None
        assert isinstance(resp, dict) and len(resp) == 1 and "uuid" in resp

    api_key = reporting_cc.api_key
    headers = {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/json","Authorization": f"Bearer {user_de_id.token}",}
    with Then("send a request for get a report status"):
        time.sleep(30)
        response = sut.reporting.get_status_report(headers=headers, uuid=report_id)
        status = response.json().get("status")
        assert status == "READY"

    headers = {'Accept': "application/json", "ContentType": "application/csv","Authorization": f"Bearer {user_de_id.token}",}
    with When("send a request order to generate a csv report without the api-key"):
        response = sut.reporting.get_report_endpoints(headers=headers, uuid=report_id, format="Csv")
    with Then("verify status code 403 and message Forbidden appears in the response"):
        assert_response_text(403, response.status_code)
        response_json = response.json()
        assert "message" in response_json
        assert response_json["message"] == "Forbidden"


def test_get_report_json_api_without_api_key_status_code_403(sut, user_de_id):
    """
    Send a request to reportJson Api for download the json format report
    without api-key and get status code 403
    @param sut:for using all configurations and base definitions
    @param user_de_id:user id for upload data to dss
    """
    with Given(f"generate data for user"):
        num_of_records = 10
        user_deid = sut.auth.get_auth_authenticate(user_token=user_de_id.token)
        generate_data_dss.test_generete_record(sut, user_deid.json()['nutrino_id'], num_of_records)
        report_id = None
        start_day = datetime.now()
        end_day = datetime.now() + timedelta(7)
        selected_day = datetime.now() + timedelta(5)
    api_key = reporting_cc.api_key
    headers = {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/json","Authorization": f"Bearer {user_de_id.token}",
               "Encoding": "BASE64", "Compression": "ZIP"}

    with When("send a request to generate a UUID, use the body of the request with the generated username"):
        body = valid_record
        body["StartDate"] = start_day.strftime('%m/%d/%Y')
        body["EndDate"] = end_day.strftime('%m/%d/%Y')
        body["ShortDatePattern"] = selected_day.strftime('%m/%d/%Y')
        body["ShowDailiesForDates"] = [selected_day.strftime('%m/%d/%Y')]
        response = sut.reporting.post_generate_report(json=body, headers=headers)
        report_id = response.json().get("uuid")
        assert_response_text(200, response.status_code)
        resp = response.json()
        assert resp is not None
        assert isinstance(resp, dict) and len(resp) == 1 and "uuid" in resp

    api_key = reporting_cc.api_key
    headers = {'Accept': "application/json", 'x-api-key': api_key, "ContentType": "application/json","Authorization": f"Bearer {user_de_id.token}"}
    with When("send a request for get a report status"):
        time.sleep(30)
        response = sut.reporting.get_status_report(headers=headers, uuid=report_id)
        status = response.json().get("status")
        assert status == "READY"

    headers = {'Accept': "application/json", "ContentType": "application/json","Authorization": f"Bearer {user_de_id.token}"}
    with When("send a request order to generate a json report without the api-key"):
        response = sut.reporting.get_report_endpoints(headers=headers, uuid=report_id, format="Json")
    with Then("verify status code 403 and message Forbidden appears in the response"):
        assert_response_text(403, response.status_code)
        response_json = response.json()
        assert "message" in response_json
        assert response_json["message"] == "Forbidden"
