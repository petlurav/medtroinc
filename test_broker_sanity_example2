import time
import pytest
from infra.steps.steps import When, Then, Given
from infra.utils.assert_functions import assert_response_text
from tests.broker_and_metadata_service import common_operations
from tests.broker_and_metadata_service.common_operations import STATUS_OK
from tests.broker_and_metadata_service.broker_body_template import get_body_template
from tests.phoenix_cc import generate_pump_events
from tests_resources.cc_pump_data.pump_json_schemas import pump_types_schemas

amount_of_sec_in_30_years = 946684800
SEQ_ID = 3
DEVICE_ID = 1234
CATEGORY_TYPE = 'PERIODIC_THERAPY'


# some constants


@pytest.mark.daily
@pytest.mark.deployment
@pytest.mark.sanity
@pytest.mark.broker_service
@pytest.mark.xrayjira(test_key='COM-4045')
@pytest.mark.parametrize("content_type", ["application/pdf", "application/json", "application/csv"])
@pytest.mark.parametrize("encoding", ["BASE64", "NONE"])
@pytest.mark.parametrize("compression", ["ZIP", "GZIP", "NONE"])
def test_generate_report_different_headers_status_code_200(sut, report, user_de_id, content_type, encoding,
                                                           compression):
    """
    Upload data with deid to DSS, send a request to the generateReport API, get "uuid" in the response for different headers.
    @param sut: For using all configurations and base definitions.
    @param user_de_id: User deid for upload data to DSS.
    @param content_type: ContentType for the request.
    @param encoding: Encoding for the request.
    @param compression: Compression for the request.
    """
    with Given(f"Generate data for user"):
        response_de_id = common_operations.generate_de_id_user(sut=sut, user_token=user_de_id.token, report=report)
        common_operations.create_and_upload_records_to_dss(sut=sut, user=response_de_id)
        body = get_body_template(start_day=0, end_day=7)
    with When("Send the body of the request with the generated deid"):
        headers = common_operations.generate_broker_service_headers(content_type, encoding, compression, sut,user_de_id)
        response = sut.broker.post_generate_report(json=body, headers=headers)
        assert_response_text(STATUS_OK, response.status_code), f"Test failed, status code is: {response.status_code}"
        report_id = response.json()
        report.debug(f"Print the uuid for headers type ContentType")
    with Then("Verify that the 'uuid' displays correctly for all header types and for the requested patient"):
        report.debug(f"Print the uuid for headers type ContentType={content_type}, Encoding={encoding}, Compression={compression}: {report_id}")
        assert report_id is not None, "Test failed, the uuid is empty"
        assert isinstance(report_id, dict) and len(report_id) == 1 and "uuid" in report_id, "Test failed, 'uuid' not generated"


@pytest.mark.daily
@pytest.mark.deployment
@pytest.mark.sanity
@pytest.mark.broker_service
@pytest.mark.xrayjira(test_key='COM-4070')
def test_generate_report_with_error_status(sut, report, user_de_id, user):
    """
    upload data with deid to dss ,send a request to 'generatereport' api,
    and get the 'uuid' use the 'uuid' to get a report status from the 'getstatus' api request
    and get status code 200 and status report "ERROR" in the response
    @param sut:for using all configurations and base definitions
    @param user_de_id:user deid for upload data to dss
    """
    with (Given(f"generate data for user")):
        response_de_id = common_operations.generate_de_id_user(sut=sut, user_token=user_de_id.token, report=report)
        common_operations.create_and_upload_records_to_dss(sut=sut, user=response_de_id)
        headers = common_operations.generate_broker_service_headers("application/json", "BASE64", "ZIP", sut,user_de_id)
        body = get_body_template(start_day=0, end_day=9, add_error=True, add_error_array=True)
    with (When("sending the body to the 'generateReport' api request with the generated deid to generate a uuid")):
        report_id = common_operations.get_report_id(sut=sut, body=body, headers=headers)
    with Then("verify the status name is 'ERROR' returns in the response"):
        headers = common_operations.generate_broker_service_headers("application/json", "BASE64", "ZIP", sut,user_de_id)
        expected_status = "ERROR"
        status = common_operations.verify_status(sut, expected_status, 3, report_id, headers, report)
        assert status == expected_status, f"Expected status {expected_status}, Got{status}"


@pytest.mark.daily
@pytest.mark.deployment
@pytest.mark.sanity
@pytest.mark.broker_service
@pytest.mark.xrayjira(test_key='COM-4105')
def test_get_status_code_200_status_ready(sut, report, user_de_id):
    """
    upload data with deid to dss ,send a request to 'generatereport' api,
    and get the 'uuid' use the 'uuid' to get a report status from the 'getstatus' api and
    get status code 200 and status "READY" in the response
    @param sut:for using all configurations and base definitions
    @param user_de_id:user deid for upload data to dss
    """
    with Given(f"generate data for user"):
        response_de_id = common_operations.generate_de_id_user(sut=sut, user_token=user_de_id.token, report=report)
        common_operations.create_and_upload_records_to_dss(sut=sut, user=response_de_id)
        body = get_body_template(start_day=0, end_day=9)
        headers = common_operations.generate_broker_service_headers("application/json", "BASE64", "ZIP", sut,user_de_id)
    with When("sending the body to the 'generateReport' api request with the generated deid to generate a uuid"):
        report_id = common_operations.get_report_id(sut=sut, body=body, headers=headers)
    with Then("verify the status name is 'READY' returns in the response "):
         headers = common_operations.generate_broker_service_headers("application/json", "BASE64", "ZIP", sut,user_de_id)
        expected_status = "READY"
        status = common_operations.verify_status(sut, expected_status, 3, report_id, headers, report)
        assert status == expected_status, f"Expected status {expected_status}, Got{status}"


@pytest.mark.daily
@pytest.mark.deployment
@pytest.mark.sanity
@pytest.mark.broker_service
@pytest.mark.xrayjira(test_key='COM-6224')
def test_get_report_csv_format_status_code_200(sut, report, user_de_id, user):
    """
    upload data with deid to dss,send a request to 'generateReport' api
    and get the 'uuid', use the 'uuid' to get a report status from the 'getstatus' api request,
    and send a request to 'reportcsv' api to get a report in csv format
    @param sut:for using all configurations and base definitions
    @param user_de_id:user deid for upload data to dss
    """
    with (Given(f"generate data for user and upload to phoenix")):
        data = pump_types_schemas.sensor_glucose
        generate_pump_events.generate_pump_event(sut=sut, user=user_de_id, report=report, seq_id=SEQ_ID, data_json=data,
                                                 device_id=DEVICE_ID, os_type='ios',
                                                 utc_offset=(86400 + amount_of_sec_in_30_years))
        headers = common_operations.generate_broker_service_headers("application/csv", "BASE64", "ZIP", sut, user_de_id)
        body = get_body_template(start_day=0, end_day=9)
    with When("send the body to the 'generateReport' api request with the generated deid to generate a uuid"):
        report_id = common_operations.get_report_id(sut=sut, body=body, headers=headers)
    with (When("send a request to get a report status")):
        headers = common_operations.generate_broker_service_headers("application/csv", "BASE64", "ZIP", sut, user_de_id)
        expected_status = "READY"
        status = common_operations.verify_status(sut, expected_status, 3, report_id, headers, report)
        assert status == expected_status, f"Expected status {expected_status}, Got{status}"
    with Then("verify that the csv report was generate with data that belongs to the uploaded user data"):
        headers = common_operations.generate_broker_service_headers("application/csv", "BASE64", "ZIP", sut, user_de_id)
        response = sut.broker.get_report_endpoints(headers=headers, uuid=report_id, report_format='Csv')
        assert_response_text(STATUS_OK, response.status_code), f"Test was failed status code is:{response.status_code}"
        assert len(response.text) > 0, "No data appears in the csv report"
        assert "Content-Type" in response.headers and "application/csv" in response.headers["Content-Type"]


@pytest.mark.daily
@pytest.mark.deployment
@pytest.mark.sanity
@pytest.mark.broker_service
@pytest.mark.xrayjira(test_key='COM-6227')
def test_get_report_json_format_generated(sut, report, user_de_id):
    """
    upload data with deid to dss, send a request to 'generateReport' api
    and get the 'uuid', use the 'uuid' to get a report status from the 'getstatus' api request,
    and send a request to the 'reportjson' api to get a report in json format
    @param sut:for using all configurations and base definitions
    @param user_de_id:user deid for upload data to dss
    """
    with Given(f"generate data for user"):
        response_de_id = common_operations.generate_de_id_user(sut=sut, user_token=user_de_id.token, report=report)
        common_operations.create_and_upload_records_to_dss(sut=sut, user=response_de_id)
        headers = common_operations.generate_broker_service_headers("application/json", "BASE64", "ZIP", sut,user_de_id)
        body = get_body_template(start_day=0, end_day=6)
    with When("send the body to the 'generateReport' api request to generate a uuid"):
        report_id = common_operations.get_report_id(sut=sut, body=body, headers=headers)
    with When(" send a request for get a report status"):
        headers = common_operations.generate_broker_service_headers("application/json", "BASE64", "ZIP", sut,user_de_id)
        time.sleep(30)
        expected_status = "READY"
        status = common_operations.verify_status(sut, expected_status, 3, report_id, headers, report)
        assert status == expected_status, f"Expected status {expected_status}, Got{status}"
        headers = common_operations.generate_broker_service_headers("application/json", "BASE64", "ZIP", sut,user_de_id)
    with Then("verify that the json report was generate with data that belongs to the uploaded user data"):
        response = sut.broker.get_report_endpoints(headers=headers, uuid=report_id, report_format='Json')
        report.debug(response.json())
        assert_response_text(200, response.status_code), f"Test was failed status code is:{response.status_code}"
        assert len(response.text) > 0, "No data appears in the Json report"
        assert response.headers["Content-Type"] == "application/json", f"Test failed the json report doesn't generated"

